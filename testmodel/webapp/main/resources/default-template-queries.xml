<userprofile>
  <items>
        <item id="1" class="Employee">
            <attribute name="name" value="David Brent"/>
        </item>
        <item id="2" class="Employee">
            <attribute name="name" value="Bernd Stromberg"/>
        </item>
        <item id="3" class="Employee">
            <attribute name="name" value="Timo Becker"/>
        </item>
        <item id="4" class="Employee">
            <attribute name="name" value="Neil Godwin"/>
        </item>
        <item id="5" class="Employee">
            <attribute name="name" value="Brenda"/>
        </item>
        <item id="6" class="Employee">
            <attribute name="name" value="Devon White"/>
        </item>
        <item id="7" class="Employee">
            <attribute name="name" value="Hans Schmelzer"/>
        </item>
  </items>
  <bags>
        <bag name="Global-List" type="Employee">
            <bagElement id="1"/>
            <bagElement id="2"/>
            <bagElement id="3"/>
            <bagElement id="4"/>
            <bagElement id="5"/>
            <bagElement id="6"/>
            <bagElement id="7"/>
        </bag>
  </bags>
  <queries>
  </queries>

  <template-queries>
    <template name="employeeByName" description="View all the employees with certain name" >
      <query name="employeeByName" model="testmodel" view="Employee.name Employee.age">
        <node path="Employee" type="Employee">
        </node>
        <node path="Employee.name" type="String">
          <constraint op="=" value="" description="" identifier="Employee.name" editable="true" code="A">
          </constraint>
        </node>
      </query>
    </template>

    <template name="employeesFromCompanyAndDepartment" description="View all the employees that work within a certain department of the specified company" >
      <query name="employeesFromCompanyAndDepartment" model="testmodel" view="Employee.name Employee.age" constraintLogic="A and B">
        <node path="Employee" type="Employee">
        </node>
        <node path="Employee.department" type="Department">
        </node>
        <node path="Employee.department.company" type="Company">
        </node>
        <node path="Employee.department.company.name" type="String">
          <constraint op="=" value="CompanyA" description="" identifier="Company.name" editable="true" code="A">
          </constraint>
        </node>
        <node path="Employee.department.name" type="String">
          <constraint op="LIKE" value="Department*" description="" identifier="Department.name" editable="true" code="B">
          </constraint>
        </node>
      </query>
    </template>

    <template name="employeesOfACertainAge" description="View all the employees of a certain age" >
      <query name="employeesOfACertainAge" model="testmodel" view="Employee.name Employee.age" constraintLogic="A and B">
        <node path="Employee" type="Employee">
        </node>
        <node path="Employee.age" type="int">
          <constraint op="&gt;" value="35" description="First age constraint" identifier="Employee.age.LESS_THAN.1" editable="true" code="A">
          </constraint>
          <constraint op="!=" value="55" description="Second age constraint" identifier="Employee.age.NOT_EQUALS.1" editable="true" code="B">
          </constraint>
        </node>
      </query>
    </template>

    <template name="employeesOverACertainAgeFromDepartmentA" title="View all the employees of a certain age from a certain department" longDescription="" comment="" >
      <query name="employeesOverACertainAgeFromDepartmentA" model="testmodel" view="Employee.name Employee.age Employee.department.name" constraintLogic="A and B">
        <node path="Employee" type="Employee">
        </node>
        <node path="Employee.age" type="int">
          <constraint op="&gt;=" value="25" description="Age constraint" identifier="Employee.age.NOT_EQUALS.1" editable="true" code="A">
          </constraint>
        </node>
        <node path="Employee.department" type="Department">
        </node>
        <node path="Employee.department.name" type="String">
          <constraint op="=" value="DepartmentA" description="Department constraint" identifier="" editable="true" code="B">
          </constraint>
        </node>
      </query>
    </template>

    <template name="convertEmployeesToAddresses" title="Convert employees to addresses" longDescription="" comment="" >
      <query name="convertEmployeesToAddresses" model="testmodel" view="Employee.id Employee.address.id">
        <node path="Employee" type="Employee"/>
        <node path="Employee.id" type="Integer">
          <constraint op="=" value="0" description="id" identifier="" editable="true" code="A"/>
        </node>
        <node path="Employee.address.id" type="Integer"/>
      </query>
    </template>

    <template name="convertEmployeeToManager" title="Convert Employees to Managers" longDescription="" comment="" >
      <query name="convertEmployeeToManager" model="testmodel" view="Employee.id Employee.department.manager.id">
        <node path="Employee" type="Employee">
        </node>
        <node path="Employee.id" type="Integer">
          <constraint op="=" value="0" description="id" identifier="" editable="true" code="A">
          </constraint>
        </node>
      </query>
    </template>

    <template name="convertContractorToEmployees"
              title="convert contractors to employees" longDescription=""
              comment="This isn't a very sensible query to do, but it's useful for testing the TypeConverter class"
              >
      <query name="convertContractorToEmployees" model="testmodel" view="Contractor.id Contractor.companys.departments.employees.id">
        <node path="Contractor" type="Contractor">
        </node>
        <node path="Contractor.id" type="Integer">
          <constraint op="=" value="0" description="Contractor.id" identifier="Contractor.id" editable="true" code="A">
          </constraint>
        </node>
      </query>
    </template>

  <template name="ManagerLookup" title="Search for Managers" longDescription="Use a LOOKUP constraint to search for Managers." comment="">
    <query name="ManagerLookup" model="testmodel" view="Manager.name Manager.title">
      <node path="Manager" type="Manager">
        <constraint op="LOOKUP" value="Mr." description="" identifier="" editable="true" code="A">
        </constraint>
      </node>
    </query>
  </template>

  <template name="fourConstraints" title="Complicated template">
      <query name="" model="testmodel" view="Employee.name Employee.age Employee.end Employee.fullTime" sortOrder="Employee.age asc" constraintLogic="A and (B or C) and D">
          <node path="Employee" type="Employee">
          </node>
          <node path="Employee.name" type="String">
              <constraint op="CONTAINS" value="Employee" description="" identifier="" editable="true" code="D">
              </constraint>
          </node>
          <node path="Employee.age" type="int">
              <constraint op="&lt;" value="10" description="" identifier="" editable="true" code="B">
              </constraint>
                <constraint op="&gt;" value="30" description="" identifier="" editable="true" code="C">
                </constraint>
          </node>
          <node path="Employee.fullTime" type="boolean">
              <constraint op="=" value="true" description="" identifier="" editable="true" code="A">
              </constraint>
          </node>
      </query>
  </template>

  <template name="Employee_Colleagues" title="Employee --&gt; Colleagues">
      <query name="Employee_Colleagues" model="testmodel" view="Employee.department.employees.name Employee.department.employees.age Employee.department.employees.fullTime">
          <constraint path="Employee" op="LOOKUP" value="EmployeeA1" code="A" editable="true"/>
          <constraint path="Employee" op="!=" value="Employee.department.employees" editable="false" code="B"/>
      </query>
  </template>
  <template name="Department_Employees" title="Department --&gt; Employees">
      <query name="Department_Employees" model="testmodel" view="Department.employees.name Department.employees.age Department.employees.fullTime">
          <constraint path="Department.name" op="=" value="DepartmentA" code="A" editable="true"/>
          <constraint path="Department.company.name" op="=" value="CompanyA" code="B" editable="true"/>
      </query>
  </template>
  <template name="Company_Departments" title="Company --&gt; Departments" longDescription="Departments in the given company">
      <query name="Company_Departments" model="testmodel" view="Company.departments.name Company.departments.manager.name">
          <constraint path="Company" op="LOOKUP" value="CompanyA" editable="true" code="A"/>
      </query>
  </template>
  <template name="Company_Employees" title="Company --&gt; Employees" longDescription="Employees who work in the given company">
      <query name="Company_Departments" model="testmodel" view="Company.departments.employees.name Company.departments.employees.age Company.departments.employees.fullTime">
          <constraint path="Company" op="LOOKUP" value="CompanyA" editable="true" code="A"/>
      </query>
  </template>
  <template name="Underwater_People" title="Underwater People" longDescription="Find employees in significant debt">
      <query name="Underwater_People" model="testmodel" view="Broke.debt Broke.interestRate Broke.owedBy.name Broke.bank.name">
        <constraint path="Broke.debt"
              code="A" editable="true" op="&gt;=" value="500"/>
         <constraint path="Broke.bank.name"
              code="B" editable="true"
              description="Turn on this filter to find people in debt at a particular bank."
              switchable="off" op="=" value="Gringotts"/>
      </query>
  </template>
  <template name="Company_Contractors" title="Company --&gt; Contractors" longDescription="Contractors who have a relationship with the given company">
      <query name="Company_Contractors" model="testmodel" view="Company.contractors.name Company.contractors.seniority Company.contractors.businessAddress.address Company.contractors.personalAddress.address">
          <constraint path="Company" op="LOOKUP" value="CompanyA" editable="true" code="A"/>
      </query>
  </template>
  <template name="CEO_Rivals" title="CEO --&gt; Rivals" longDescription="Rivals of this CEO">
      <query name="CEO_Rivals" model="testmodel" view="CEO.name CEO.salary CEO.seniority CEO.company.name">
          <constraint path="CEO.name" op="!=" value="EmployeeB1" editable="true" code="A"/>
      </query>
  </template>
  <template name="BrokenGlobal" title="This template should not validate">
      <query name="BrokenGlobal" model="testmodel" view="Employee.name Employee.age Employee.favouriteColour">
          <constraint path="Employee.childhoodPet" type="Dog"/>
      </query>
  </template>
  </template-queries>


  <tags>
    <tag name="im:aspect:People" objectIdentifier="org.intermine.model.testmodel.Employee" type="class">
    </tag>
    <tag name="im:aspect:People" objectIdentifier="org.intermine.model.testmodel.Manager" type="class">
    </tag>
    <tag name="im:aspect:People" objectIdentifier="org.intermine.model.testmodel.CEO" type="class">
    </tag>
    <tag name="im:aspect:People" objectIdentifier="org.intermine.model.testmodel.Contractor" type="class">
    </tag>
    <tag name="im:aspect:People" objectIdentifier="org.intermine.model.testmodel.Secretary" type="class">
    </tag>
    <tag name="im:aspect:Entities" objectIdentifier="org.intermine.model.testmodel.Bank" type="class">
    </tag>
    <tag name="im:aspect:Entities" objectIdentifier="org.intermine.model.testmodel.Department" type="class">
    </tag>
    <tag name="im:aspect:Entities" objectIdentifier="org.intermine.model.testmodel.Address" type="class">
    </tag>
    <tag name="im:aspect:People" objectIdentifier="employeesFromCompanyAndDepartment" type="template">
    </tag>
    <tag name="im:aspect:People" objectIdentifier="employeesOverACertainAgeFromDepartmentA" type="template"/>
    <tag name="im:public" objectIdentifier="employeesOverACertainAgeFromDepartmentA" type="template"/>
    <tag name="im:public" objectIdentifier="employeesFromCompanyAndDepartment" type="template"/>
    <tag name="im:aspect:People" objectIdentifier="employeeByName" type="template"/>
    <tag name="im:public" objectIdentifier="employeeByName" type="template"/>
    <tag name="im:aspect:People" objectIdentifier="employeesOfACertainAge" type="template"/>
    <tag name="im:public" objectIdentifier="employeesOfACertainAge" type="template"/>
    <tag name="im:aspect:People" objectIdentifier="ManagerLookup" type="template"/>
    <tag name="im:public" objectIdentifier="ManagerLookup" type="template"/>
    <tag name="im:converter" objectIdentifier="convertEmployeesToAddresses" type="template"/>
    <tag name="im:converter" objectIdentifier="convertContractorToEmployees" type="template"/>
    <tag name="im:converter" objectIdentifier="convertEmployeeToManager" type="template"/>
    <tag name="im:public" objectIdentifier="fourConstraints" type="template"/>
    <tag name="im:public" objectIdentifier="Employee_Colleagues" type="template"/>
    <tag name="im:aspect:People" objectIdentifier="Employee_Colleagues" type="template"/>
    <tag name="im:public" objectIdentifier="Department_Employees" type="template"/>
    <tag name="im:public" objectIdentifier="Company_Departments" type="template"/>
    <tag name="im:public" objectIdentifier="Company_Employees" type="template"/>
    <tag name="im:public" objectIdentifier="Company_Contractors" type="template"/>
    <tag name="im:public" objectIdentifier="Underwater_People" type="template"/>
    <tag name="im:public" objectIdentifier="CEO_Rivals" type="template"/>
    <tag name="im:public" objectIdentifier="Global-List" type="bag"/>
  </tags>
</userprofile>
