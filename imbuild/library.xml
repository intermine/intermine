
<project name="library" basedir="." xmlns:lib="http://www.intermine.org/ns/im-lib-proj/1">

  <dirname property="library.xml.basedir" file="${ant.file.library}"/>


  <!-- Import antcontrib tasks -->
  <taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${library.xml.basedir}/lib/ant-contrib.jar"/>

  <!-- Import intermine build tasks -->
  <taskdef resource="org/intermine/task/antlib.xml" classpath="${library.xml.basedir}/lib/im-ant-tasks.jar"/>

  <!-- INIT -->

  <target name="-init-project">
    <!-- <property file="${user.home}/build.properties"/> -->
    <property file="project.properties"/>
  </target>

  <target name="-pre-pre-init" depends="-init-project"/>

  <target name="-pre-init" depends="-pre-pre-init">
    <!-- Directories -->
    <property name="build.dir" location="build"/>
    <property name="src.dir" location="src"/>
    <property name="resources.dir" location="resources"/>
    <property name="dist.dir" location="dist"/>
    <property name="lib.dir" location="lib"/>
    <property name="build.classes.dir" location="${build.dir}/classes"/>
    <property name="build.model.dir" location="${build.dir}/model"/>
    <property name="gen.src.dir" location="${build.dir}/gen/src"/>
    <property name="build.javadoc.dir" value="${build.dir}/javadoc"/>
    <!-- Compilation settings -->
    <property name="javac.source" value="1.6"/>
    <property name="javac.target" value="1.6"/>
    <property name="javac.compiler" value="modern"/>
    <property name="javac.debug" value="on"/>
    <property name="javac.debuglevel" value="lines,vars,source"/>
    <property name="build.classes.excludes" value="**/*.java"/>
    <property name="javac.compilerargs" value=""/>
    <property name="generating.code" value="false"/>
    <!-- Packaging settings -->
    <property name="dist.jar" location="${dist.dir}/${ant.project.name}.jar"/>
    <property name="jar.compress" value="off"/>
    <!-- Javadoc settings -->
    <property name="javadoc.windowtitle" value="${ant.project.name}"/>
    <property name="javadoc.additionalparam" value=""/>
    <!-- Checkstyle settings -->
    <property name="build.checkstyle.dir" value="${build.dir}/checkstyle"/>
    <!-- Conditions -->
    <condition property="gen.code">
      <and><istrue value="${generating.code}"/></and>
    </condition>
    <path id="xslt.class.path">
      <fileset dir="${library.xml.basedir}/im-ant-tasks/lib" includes="*.jar"/>
    </path>
    <path id="checkstyle.classpath">
      <path refid="project.compile.path"/>
      <pathelement location="${build.classes.dir}"/>
    </path>
  </target>

  <target name="init" depends="-pre-init"/>

  <target name="default" depends="compile, jar, action"/>

  <target name="-init-deps-no-build" depends="skip-deps">
    <dependencies basedir="${library.xml.basedir}/.."/>
  </target>

  <target name="skip-deps">
    <property name="no.dep" value="true"/>
  </target>

  <target name="-pre-init-deps"/>

  <target name="-init-deps" depends="-pre-init-deps">
    <dependencies basedir="${library.xml.basedir}/.."/>
    <!--
    <property name="cp" refid="project.compile.path"/>
    <echo message="project.compile.path classpath is ${cp}"/>
    -->
  </target>

  <!-- CODE GENERATION -->
  <target name="-init-generate" if="gen.code" depends="init, -init-deps">
    <mkdir dir="${gen.src.dir}"/>
  </target>

  <target name="-pre-generate"/>

  <target name="-post-generate"/>

  <target name="do-generate"/>

  <target name="generate" depends="-init-generate, -pre-generate, do-generate, -post-generate"/>

  <!-- COMPILE -->

  <target name="-init-compile" depends="init, -init-deps">
    <mkdir dir="${build.classes.dir}"/>
  </target>

  <target name="-pre-compile"/>

  <target name="-post-compile"/>

  <target name="do-compile-with-gen-src" if="gen.code">
    <lib:javac>
      <customize>
        <src path="${gen.src.dir}"/>
      </customize>
    </lib:javac>
  </target>

  <target name="do-compile-without-gen-src" unless="gen.code">
    <lib:javac/>
  </target>

  <target name="do-compile"
          depends="-init-macrodef-javac, do-compile-with-gen-src, do-compile-without-gen-src"
          unless="nothing.to.compile">
    <copy todir="${build.classes.dir}">
      <fileset dir="${src.dir}" excludes="${build.classes.excludes}"/>
    </copy>
  </target>

  <target name="compile" depends="-init-compile, generate, -pre-compile, do-compile, -post-compile"/>

  <!-- JAR -->

  <target name="-pre-jar"/>

  <target name="-post-jar"/>

  <target name="-init-jar" depends="init, -init-deps">
    <mkdir dir="${dist.dir}"/>
  </target>

  <target name="do-jar" depends="-init-presetdef-jar">
    <lib:jar/>
  </target>

  <target name="jar" depends="compile, -init-jar, -pre-jar, do-jar, -post-jar"/>


  <!-- ACTION -->

  <target name="-pre-action"/>

  <target name="-post-action"/>

  <target name="-init-action" depends="init, -init-deps"/>

  <!-- a generic action target that can be overridden by projects that need to
       do something after compile and jar - an example is integrate -->
  <target name="do-action"/>

  <target name="action" depends="compile, jar, -init-action, -pre-action, do-action, -post-action"/>


  <!-- JAVADOC -->

  <target name="-init-javadoc" depends="init, -init-deps">
    <mkdir dir="${build.javadoc.dir}"/>
  </target>

  <target name="-javadoc-build" depends="-init-javadoc">
    <javadoc destdir="${build.javadoc.dir}" source="${javac.source}" notree="${javadoc.notree}"
            use="${javadoc.use}" nonavbar="${javadoc.nonavbar}" noindex="${javadoc.noindex}"
            splitindex="${javadoc.splitindex}" author="${javadoc.author}" version="${javadoc.version}"
            windowtitle="${javadoc.windowtitle}" private="${javadoc.private}"
            additionalparam="${javadoc.additionalparam}" failonerror="true">
      <classpath refid="project.compile.path"/>
      <sourcepath>
        <pathelement location="${src.dir}" />
      </sourcepath>
    </javadoc>
  </target>

  <target name="javadoc" depends="-init-javadoc,-javadoc-build"/>

  <!-- CHECKSTYLE -->

  <target name="-init-checkstyle" depends="init, -init-deps-no-build">
    <mkdir dir="${build.checkstyle.dir}"/>
  </target>

  <target name="do-checkstyle" depends="-init-macrodef-checkstyle">
    <lib:checkstyle>
      <customize>
        <fileset dir="${src.dir}" includes="**/*.java"/>
      </customize>
    </lib:checkstyle>
  </target>

  <target name="checkstyle" depends="-init-checkstyle, do-checkstyle"/>

  <target name="-init-macrodef-checkstyle">
    <macrodef name="checkstyle" uri="http://www.intermine.org/ns/im-lib-proj/1">
      <attribute name="srcdir" default="${src.dir}"/>
      <element name="customize" optional="true"/>
      <sequential>
        <taskdef resource="checkstyletask.properties" classpath="${library.xml.basedir}/lib/checkstyle-5.6-all.jar"/>
        <checkstyle config="${library.xml.basedir}/checkstyle/checkstyle-config.xml"
                failureProperty="checkstyle.failure"
                failOnViolation="false">
          <classpath refid="checkstyle.classpath"/>
          <formatter type="xml" tofile="${build.checkstyle.dir}/checkstyle_report.xml" />
          <customize/>
          <property key="checkstyle.header.file" value="${library.xml.basedir}/checkstyle/copyright_header.txt"/>
        </checkstyle>
        <style in="${build.checkstyle.dir}/checkstyle_report.xml"
               out="${build.checkstyle.dir}/checkstyle_report.html"
               style="${library.xml.basedir}/checkstyle/checkstyle-frames.xsl"
               classpathref="xslt.class.path"/>
        <fail message="Some files do not adhere to InterMine coding standards" if="checkstyle.failure"/>
      </sequential>
    </macrodef>
  </target>


  <!-- CLEAN -->

  <target name="-pre-clean"/>

  <target name="clean" depends="-pre-clean, -pre-init">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete>
      <fileset dir="." includes="velocity.log*, intermine.log*"/>
    </delete>
  </target>

  <target name="-pre-clean-all"/>

  <target name="clean-all" depends="-pre-clean-all, clean">
    <property name="no.dep" value="false"/>
    <dependencies basedir="${library.xml.basedir}/.." target="clean"/>
  </target>

  <target name="-init-macrodef-javac">
    <macrodef name="javac" uri="http://www.intermine.org/ns/im-lib-proj/1">
      <attribute name="srcdir" default="${src.dir}"/>
      <attribute name="destdir" default="${build.classes.dir}"/>
      <attribute name="classpath" default="project.compile.path"/>
      <attribute name="dependpath" default="project.depend.path"/>
      <attribute name="debug" default="${javac.debug}"/>
      <element name="customize" optional="true"/>
      <sequential>
        <depend srcdir="@{srcdir}" destdir="@{destdir}" closure="yes" dump="yes"
                cache="${build.dir}/depend.cache">
          <classpath refid="@{dependpath}"/>
        </depend>
        <javac srcdir="@{srcdir}" destdir="@{destdir}" debug="@{debug}" compiler="${javac.compiler}"
           source="${javac.source}" target="${javac.target}"
           includeantruntime="false">
          <classpath refid="@{classpath}"/>
          <compilerarg line="${javac.compilerargs}"/>
          <customize/>
        </javac>
      </sequential>
    </macrodef>
  </target>

  <target name="-init-presetdef-jar">
    <presetdef name="jar" uri="http://www.intermine.org/ns/im-lib-proj/1">
      <jar compress="${jar.compress}" jarfile="${dist.jar}">
        <fileset dir="${build.classes.dir}"/>
        <fileset dir="${resources.dir}"/>
      </jar>
    </presetdef>
  </target>

  <target name="dot" depends="init, -init-deps">
    <path id="dot.class.path">
      <path refid="project.compile.path"/>
      <pathelement location="${build.classes.dir}"/>
      <pathelement location="${library.xml.basedir}/lib/im-ant-tasks.jar"/>
    </path>

    <taskdef name="dot" classname="org.intermine.task.InheritanceDotTask" classpathref="dot.class.path"/>
    <dot directory="${src.dir}" packageName="org.intermine" file="src.dot" omit="java.io.Serializable,java.lang.Object" boring="java.lang.Object"/>

  </target>
</project>
