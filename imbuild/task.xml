<project name="task" default="default" basedir="." xmlns:imdbproj="http://www.intermine.org/ns/im-task-proj/1">

  <dirname property="task.xml.basedir" file="${ant.file.task}"/>

  <!--
     |
     | Import this file and call the target -init-task-xml to have access
     | to database/objectstore/web related tasks. The classpath used to load the
     | tasks is called task.class.path and is defined with the target -define-task-classpath.
     | By default, this classpath extends project.compile.path and adds the location
     | ${build.task.dir} directory. Put things in ${build.task.dir} that are expected
     | to be on the classpath while running tasks. Override -define-task-classpath to
     | alter the classpath defined.
     |
     | -init-task-xml tries to load the tasks defined in:
     |
     |    org/intermine/task/antlib-os.xml
     |    org/intermine/task/antlib-int.xml
     |    org/intermine/task/antlib-web.xml
     |
     | It only loads tasks from these xml files if they are available as resources
     | on project.compile.path.
     |
     | Before calling -init-task-xml, these properties should be defined:
     |
     |    ${build.dir}
     |
   -->

  <!-- ABSTRACT TARGETS -->

  <target name="default">
    <!-- consuming projects should implement this target -->
  </target>

  <target name="-init-project">
    <!-- Consuming projects should implement this target -->
  </target>

  <target name="-pre-init">
      <!-- Consuming projects should implements this target. -->
  </target>


  <target name="-check-task-availability">
    <available property="antlib-os-available" resource="org/intermine/task/antlib-os.xml" classpathref="task.class.path"/>
    <available property="antlib-int-available" resource="org/intermine/task/antlib-int.xml" classpathref="task.class.path"/>
    <available property="antlib-web-available" resource="org/intermine/web/task/antlib-web.xml" classpathref="task.class.path"/>
  </target>
  
  <target name="-set-release-suffix-exists" if="release">
    <property name="release-suffix" value=".${release}"/>
  </target>

  <target name="-set-release-suffix-not-exists" unless="release">
    <!-- default to no suffix -->
    <property name="release-suffix" value=""/>
  </target>

  <target name="-set-release-suffix" 
          depends="-set-release-suffix-not-exists, -set-release-suffix-exists"/>


  <target name="-init-check-for-intermine-properties"
          depends="-set-release-suffix, -pre-define-task-classpath, -init-project">
    <available file="${user.home}/.intermine/${intermine.properties.file}${release-suffix}"
               property="have.intermine.properties.file" />
  </target>

  <target name="-init-check-for-intermine-properties-dir"
          depends="-set-release-suffix, -pre-define-task-classpath, -init-project">
    <available file="${user.home}/.intermine"
               property="have.intermine.properties.dir" />
  </target>

  <target name="-check-for-intermine-properties-file" depends="-init-project" 
          unless="intermine.properties.file">
    <fail unless="temporary.webapp.project">
You need to set the intermine.properties.file property in your
project.properties.
    </fail>
  </target>

  <target name="-check-for-intermine-properties-dir" 
          depends="-check-for-intermine-properties-file, -init-check-for-intermine-properties-dir"
          unless="have.intermine.properties.dir">
    <fail unless="temporary.webapp.project">
Couldn't find ${user.home}/.intermine directory.  
    </fail>
  </target>

  <target name="-check-for-intermine-properties" 
          depends="-check-for-intermine-properties-file, -check-for-intermine-properties-dir, -init-check-for-intermine-properties"
          unless="have.intermine.properties.file">
    <fail unless="temporary.webapp.project">
Couldn't find ${user.home}/.intermine/${intermine.properties.file}${release-suffix}
You need to set the intermine.properties.file property in your project.properties or
specify a valid release suffix with '-Drelease=xxx'.
    </fail>
  </target>

  <target name="-init-properties" 
          depends="-check-for-intermine-properties"
          unless="temporary.webapp.project">
    <!-- depends (indirectly) on -pre-define-task-classpath so that build.task.dir is set
         and the directory is created -->

    <!-- Copy intermine.properties onto the classpath -->
    <copy file="${user.home}/.intermine/${intermine.properties.file}${release-suffix}" 
          tofile="${build.task.dir}/intermine.properties"
          overwrite="true"/>
    <!-- Copy default.intermine.properties onto the classpath -->
    <copy file="${default.intermine.properties.file}" 
          tofile="${build.task.dir}/default.intermine.properties"
          overwrite="true"/>

    <!-- make file available for later.  it needs to be copied to web.properties -->
    <property file="${build.task.dir}/intermine.properties"/>

  </target>

  <target name="-load-task-taskdefs" depends="-check-task-availability,
                                              -load-os-tasks,
                                              -load-int-tasks,
                                              -load-web-tasks"/>
  
  <target name="-load-os-tasks" if="antlib-os-available">
    <echo>Loading objectstore tasks</echo>
    <taskdef resource="org/intermine/task/antlib-os.xml" classpathref="task.class.path"/>
  </target>
  
  <target name="-load-int-tasks" if="antlib-int-available">
    <echo>Loading integration tasks</echo>
    <taskdef resource="org/intermine/task/antlib-int.xml" classpathref="task.class.path"/>
  </target>
  
  <target name="-load-web-tasks" if="antlib-web-available">
    <echo>Loading web tasks</echo>
    <taskdef resource="org/intermine/web/task/antlib-web.xml" classpathref="task.class.path"/>
  </target>

    <target name="-pre-define-task-classpath" depends="-pre-init">
    <!-- depend on -pre-init to set build.dir -->
     <property name="build.task.dir" location="${build.dir}/main"/>
     <property name="build.tmp.dir" location="${build.dir}/tmp"/>
     <mkdir dir="${build.task.dir}"/>
     <delete dir="${build.tmp.dir}" failonerror="false"/>
     <mkdir dir="${build.tmp.dir}"/>
     <copy file="${task.xml.basedir}/task.log4j.properties" toFile="${build.task.dir}/log4j.properties"/>
  </target>
  
  <target name="-define-task-classpath">
    <!-- Override to alter the classpath created -->
    <path id="task.class.path">
      <pathelement location="${build.task.dir}"/>
      <path refid="project.execute.path"/>
    </path>
  </target>

  <target name="-init-task-xml" depends="-pre-define-task-classpath,
                                         -define-task-classpath,
                                         -load-task-taskdefs,
                                         -init-macrodef-build-db"/>
  
  <!-- MACRODEF -->
  
  <target name="-init-macrodef-build-db">
    <macrodef name="build-db" uri="http://www.intermine.org/ns/im-task-proj/1">
      <attribute name="osname"/>
      <attribute name="model"/>
      <sequential>
        <delete>
          <fileset dir="${build.tmp.dir}" includes="*"/>
        </delete>
        <build-torque osName="@{osname}"
                      destFile="${build.task.dir}/@{osname}-schema.xml"/>
        <build-db osName="@{osname}"
                  tempdir="${build.tmp.dir}"
                  schemafile="@{osname}-schema.xml"
                  model="@{model}"/>
        <db-insert-model osName="@{osname}" modelName="@{model}"/>
      </sequential>
    </macrodef>
  </target>
</project>
