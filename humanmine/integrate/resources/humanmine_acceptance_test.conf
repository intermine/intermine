# acceptance tests for humanMine

assert {
  sql: select count(*) = 6 from organism
  note: human, rat and mouse, fish, fly, worm
}


# ----- homologues ----- 

assert {
  sql: select count(*) >= 6 from organism where id IN (select g.organismid from gene g, homologue h where g.id = h.geneid group by g.organismid);
  note: we have homologues from 14 different organisms
}


assert {
    sql: select count(*) > 2871000 from homologue h, gene g, dataset d, bioentitiesdatasets j where g.id = j.bioentities and d.id = j.datasets and d.name = 'Panther data set' and h.geneid = g.id;
    note: Panther homologue
}

assert {
  sql: select count(*) = 0 from bioentity e where e.id is null;
  note: bioentity id cannot be null
}

assert {
  sql: select count(*) = 0 from gene a, gene b where a.primaryidentifier = b.secondaryidentifier and a.id != b.id;
  note: any two different genes (by intermine id), one's pid should not equal to the other's secondaryidentifier  
}

no-results {
  sql: select * from gene where primaryidentifier is null
  note: primaryidentifier is always unique and non-null
}

assert {
    sql: select count(*) > 56500 and count(*) < 58500 from gene g, organism o where g.organismid = o.id and o.taxonid = 9606;
    note: Ensembl human genes should be around 57500  
}

assert {
    sql: select count(*) > 120000 and count(*) < 125000 from protein p, organism o where p.organismid = o.id and o.taxonid = 9606;
    note: human protein count
}

assert {
  sql: select count(*) >= 615000 from publication
  note: publication count
}

assert {
  sql: select count(*) >= 600000 from goannotation
}

no-results {
  sql: select * from organism where genus is null or species is null or shortname is null or name is null or taxonid is null
  note: all fields of all organisms should be filled in
}

no-results {
  sql: select * from datasource where url is null or name is null or description is null
  note: all fields of data source should be filled in
}

no-results {
  sql: select gene.id from gene where length > 2000000
  note: no genes should be too long
}

no-results {
  sql: select gene1.primaryidentifier, gene1.id, gene2.primaryidentifier, gene2.id from gene as gene1, gene as gene2 where gene1.primaryidentifier = gene2.primaryidentifier and gene1.id <> gene2.id
  note: no two genes should have the same identifier
}

no-results {
  sql: select protein1.primaryaccession, protein1.id, protein2.primaryaccession, protein2.id from protein as protein1, protein as protein2 where protein1.primaryidentifier = protein2.primaryidentifier and protein1.id <> protein2.id
  note: no two Protein objects should have the same identifier
}

no-results {
  sql: select transcript1.primaryidentifier, transcript1.id, transcript2.primaryidentifier, transcript2.id from transcript as transcript1, transcript as transcript2 where transcript1.primaryidentifier = transcript2.primaryidentifier and transcript1.id <> transcript2.id
  note: no two Transcript objects should have the same identifier
}

no-results {
  sql: select loc1.id, loc2.id, sv.id from location as loc1, location as loc2, sequencevariant as sv where loc1.featureid = loc2.featureid and loc1.featureid = sv.id and loc1.id <> loc2.id
  note: no sequencevariants should have more than one location
}

assert {
  sql: select count(*) > 220000 and count(*) < 221000 from mrna where proteinid is null
  note: human non-coding RNA count
}

no-results {
  sql: select distinct t.sourcename, o.shortname, b.class from bioentity b, organism o, tracker t where b.organismid = o.id and t.objectid = b.id and b.id not in (select bioentities from bioentitiesdatasets) order by t.sourcename, o.shortname, b.class;
  note: all bioentities should have at least one dataset.
}

no-results {
  sql: select name from dataset where id NOT IN (select bioentities from bioentitiesdatasets);
  note: all datasets should have at least one bioentity
}

no-results {
  sql: select count(*),o.taxonid from gene g, organism o where g.primaryidentifier is null and g.organismid = o.id group by o.taxonid;
  note: all genes should merge
}

no-results {
  sql: select * from gene where organismid is null;
  note:  all genes should have an organism
}

no-results {
  sql: select d.name, p.primaryidentifier from protein p, bioentitiesdatasets b, dataset d, organism o where o.taxonid = 7227 and p.organismid = o.id and b.datasets = p.id and b.bioentities = d.id and (d.name = 'Swiss-Prot data set') and p.id not in (select genes from genesproteins) order by d.name, p.primaryidentifier;
  note: All UniProt proteins should have genes
}

no-results {
  sql: select * from protein p, dataset d where p.name is null and p.secondaryidentifier is null and (d.name = 'Swiss-Prot data set' or d.name = 'TrEMBL data set');
  note: All UniProt proteins should have names
}