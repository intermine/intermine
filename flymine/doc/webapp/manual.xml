<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD Simplified DocBook XML V1.0//EN"
"http://www.oasis-open.org/docbook/xml/simple/1.0/sdocbook.dtd">
<article>
  <section>
    <title>The FlyMine Data Model</title>

    <para>The FlyMine database is based upon an object model. The object model
    has been created by merging existing ontologies and standards including
    the Sequence Ontology, MAGE, and PSI (blah blah). Additional FlyMine
    specific classes help link the ontologies and provide classes relating to
    the evidence for a particular piece of data (needs work!!). To get the
    most out of querying FlyMine it is useful to understand a bit about the
    underlying data model. First of all it is useful to understand the
    concepts of classes, objects and fields.</para>
  </section>

  <section>
    <title>Classes, Objects and Fields - the basics</title>

    <para>Classes can be thought of as templates to describe information about
    a specific type of thing. Things which have similar properties belong to
    the same class. For example in FlyMine there is a 'Gene' class. The Gene
    class describes properties of genes. The actual properties are known as
    fields. The class is a holder for a set of fields that provide information
    about the 'thing'. For example the Gene class has the fields name,
    residues etc. An object is an actual member of a class (known as an
    'instance' of that class). For example, the Notch gene is a member of the
    gene class. Every object of a class has the set of properties (fields)
    that describe that class, although some of these fields may be empty (ie.
    there may not be any data available for some fields).</para>

    <para>An easier way to understand classes and objects is to think of a
    company database. A company database can have classes that represent, for
    example, employees and departments. The employees class could be further
    subdivided into more specialised sub-classes representing certain types of
    employee, eg director, manager. Each class is described by certain
    information. For example, the employee class can be described by the
    fields, name, age and wage. A particular employee, eg. Eric, is an object
    (or instance) of the employee class. Classes can have relationships to
    each other. For example, the employee class can have a relationship to the
    department class, as employees belong to departments. A particular
    instance of the employee class has a relationship to a particular instance
    of the department class, eg. Eric may be in the Genetics department. In
    the FlyMine model, a specific object within a class has a relationship
    with a specific object in another class. For example, there is a
    relationship between the Gene class and the Transcript class. In practise
    this actually means that individual objects of the Gene class have a
    relationship with specific objects within the transcripts class. ie. a
    particular gene object has particular transcripts.</para>

    <para>You can also think of the classes as boxes containing lots of
    individual items (objects). To create a query you want certain items from
    a certain number of boxes. You therefore have to select the boxes that
    require the items you want and constrain the boxes so that you only select
    the subset of items in the boxes that you require. Because of the
    relationships between the objects in the boxes you may only need to
    constrain one box to retrieve a subset of items form another box. eg if
    you want all the genes from Drosophila, you only need to constrain the
    organism class to Drosophila to retrieve that subset of genes from the
    gene class.</para>

    <para>Fields can be one of several different data types. For example some
    fields simply contain one piece if information, such as a name. In this
    case the field is the type 'string'. Similarly, fields that contain just a
    number will be of the type, integer or ??????. Fields that contain a list
    of objects are know as collections. Some fields are actually references
    (pointers) to other classes (explained in more detail below). (fields
    containing collections from other classes?????)</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="classDiag2.gif" />
      </imageobject><textobject><phrase> </phrase></textobject>
    </mediaobject>
  </section>

  <section>
    <title>FlyMine Classes, objects and fields</title>

    <para>The FlyMine object model is made up of a number of classes which are
    linked together through various relationships. For example, the gene class
    is directly linked to the Protein class. A number of classes are
    subdivided into more 
    specialised sub-classes. E.g. the Transcript class is subdivided into
    Primary Transcripts, Processed Transcripts etc. The Exon class is
    subdivided into 5' exon, 3' exon etc.</para>
  </section>

  <section>
    <title>Constraining</title>

    <para>Querying FlyMine involves selecting and combining the classes that
    hold the objects you require. Constraints can be applied to the objects
    contained in a class, so that only a certain subset of those objects which
    have the required characteristics are selected. For example the gene class
    contains a large number of genes (gene objects) from all the organisms
    represented in FlyMine. However you may only be interested in data related
    to one specific gene. You would therefore constrain the gene name field of
    the gene class to that of the required gene. If you wish to know about the
    transcripts of that gene you would combine information from the gene class
    and the transcripts class. By constraining the name field of the gene
    class to a particular gene, you will only retrieve information from the
    transcripts class that relates to that gene (ie you do not need to apply
    the constraint to the transcripts class as well). This is because that
    particular gene object has a relationship to particular objects
    (instances) of the transcript class (ie those transcripts that are
    produced from that particular gene).</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="constrainDiag1.gif" />
      </imageobject><textobject><phrase> </phrase></textobject>
    </mediaobject>
  </section>

  <section>
    <title>The FlyMine model Browser</title>

    <para>The FlyMine model browser allows you to select the classes that
    contain the objects you require. Depending on the starting class you will
    be able to navigate to other classes as defined by the relationships
    between the classes. In other words, to combine classes containing the
    objects you require, you find a path though the classes that link together
    the information you require. Within the model browser classes that can be
    accessed from a parent class (ie are linked to the parent class through a
    relationship) are shown as fields within that class (actually a reference
    field, as the field is a reference to that particular class). For example,
    there is a relationship between the gene class and the Transcript class.
    The Transcript class therefore appears as a field within the gene
    class.</para>

    <para>For each class and field within the model browser there is a 'show'
    and a 'Constrain' (-&gt;) option. To select the subset of objects you want
    from a particular class you apply a constraint to appropriate field. For
    example if you want objects from the Gene class which have a particular
    name, you constrain the gene name field. If you want objects from the Gene
    class which have a certain sequence length or range of sequence length,
    you constrain the seqLen field. If you are constraining a class field you
    will be given the option to constrain that class to any of the subtypes of
    that class. E.g. The transcript class can be constrained to a number of
    subtypes of Transcript (e.g. primary transcript, processed transcript,
    tRNA etc.).</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="classes.gif" />
      </imageobject><textobject><phrase> </phrase></textobject>
    </mediaobject>
  </section>
</article>
