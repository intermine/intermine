<web-app xmlns="http://java.sun.com/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
                      http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
  version="3.0"
  metadata-complete="true">

  <context-param>
    <param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name>
    <param-value>InterMineWebApp</param-value>
  </context-param>

  <listener>
    <listener-class>org.intermine.web.logic.session.SessionListener</listener-class>
  </listener>

<!-- Main webapp mapping -->
<!-- ================================================================================ -->
  <servlet>
    <servlet-name>action</servlet-name>
    <servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
    <init-param>
      <param-name>config</param-name>
      <param-value>/WEB-INF/struts-config.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>action</servlet-name>
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>
<!-- ================================================================================= -->

<!-- DWR mapping -->
<!-- ================================================================================= -->

  <servlet>
  <servlet-name>dwr-invoker</servlet-name>
  <servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
    <init-param>
      <param-name>activeReverseAjaxEnabled</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>allowGetForSafariButMakeForgeryEasier</param-name>
      <param-value>true</param-value>
    </init-param>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <servlet-mapping>
  <servlet-name>dwr-invoker</servlet-name>
  <url-pattern>/dwr/*</url-pattern>
  </servlet-mapping>


<!-- ================================================================================= -->
<!-- OpenID Authenticator -->
<!-- ================================================================================= -->

  <servlet>
  <servlet-name>openid-auth</servlet-name>
  <servlet-class>org.intermine.web.logic.login.OpenIDAuthenticator</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>openid-auth</servlet-name>
  <url-pattern>/openid</url-pattern>
  </servlet-mapping>

<!-- ================================================================================= -->
<!-- Intermine Web Service mapping -->
<!-- ================================================================================= -->


  <!--@MODEL_INCLUDE@-->

  <!--@PLUGIN_INCLUDE@-->

  <servlet>
  <servlet-name>ws-query-results</servlet-name>
  <servlet-class>org.intermine.webservice.server.query.result.QueryResultServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-query-results</servlet-name>
  <url-pattern>/service/query/results/*</url-pattern>
  <metadata>
    <name>Query Results</name>
    <minVersion>1</minVersion>
    <method type="POST" authenticationRequired="false" ALSO="GET">
        <summary>Get results for a query against the database.</summary>
        <description>
            This service provides full access to arbitrary database queries.
            Queries are accepted in a serialised XML format, executed and returned
            in a streaming manner. The query format is a custom subset of the capabilities
            of SQL; see the InterMine wiki for a full description of the query XML
            syntax.
        </description>
        <param required="true" type="XML" schema="/schema/query.xsd" description="A definition of the query to execute in Path-Query XML format">query</param>
        <param type="Integer" required="false" default="2" min="1" max="2" description="The version of the XML format used">version</param>
        <param type="Integer" required="false" default="0" min="0" description="The index of the first result to return.">start</param>
        <param type="Integer" required="false" recommended="true" default="10" description="The maximum size of the result set.">size</param>
        <param type="enumerated"
               values="none,path,friendly" 
               default="none"
               required="false"
               description="Include column headers. Use friendly for human readable paths. (Only for flat-file formats)">columnheaders</param>
        <returns>
            <format accept="application/tsv">tab</format>
            <format accept="application/csv">csv</format>
            <format accept="text/count">count</format>
            <format accept="application/json" key="results">json</format>
            <format accept="application/json;type=objects" key="results">jsonobjects</format>
            <format accept="application/json;type=count" key="results">jsoncount</format>
            <format accept="application/xml">xml</format>
            <format accept="text/html">html</format>
        </returns>
    </method>
  </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-query-to-list</servlet-name>
    <servlet-class>org.intermine.webservice.server.query.QueryToListServlet</servlet-class>
    <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-query-to-list</servlet-name>
    <url-pattern>/service/query/tolist/*</url-pattern>
    <metadata>
        <name>Create List from Query</name>
        <minVersion>4</minVersion>
        <method type="POST" authenticationRequired="true" ALSO="GET">
            <summary>Save the result set of a query as a list on the server.</summary>
            <description format="markdown">
This service provides the facility to submit a query and create a new list
whose contents shall be the result set defined by running the query.

This facility places a couple of restrictions on the query itself, namely that
the view list may only contain a single item, which can refer to any attribute
of an object. The attribute itself will be ignored, and the object itself
will be selected. For this reason, one might choose to always select the `.id`
attribute when using this service.
            </description>
            <param
                required="true"
                type="XML"
                description="A definition of the query to execute in Path-Query XML format">query</param>
            <param
                description="The name for the new list. There must be no existing list of this name"
                required="true"
                type="String">name</param>
            <param required="false" type="String" description="A description to attach to the new list">description</param>
            <param required="false" type="String[]" description="A set of tags to use to categorise the new list">tags</param>
          <param
              description="Whether or not to replace any existing list of this name"
              required="false"
              type="boolean"
              default="false">replaceExisting</param>
            <returns>
                <format accept="application/json">json</format>
                <format accept="text/plain">text</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-query-append</servlet-name>
  <servlet-class>org.intermine.webservice.server.query.QueryListAppendServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
	  <servlet-name>ws-query-append</servlet-name>
	  <url-pattern>/service/query/append/tolist/*</url-pattern>
	  <metadata>
	        <name>Add to List from Query</name>
	        <minVersion>4</minVersion>
	        <method type="POST" authenticationRequired="true" ALSO="GET">
	            <summary>Add the result set of a query to a list on the server.</summary>
	            <description>
	                This service provides the facility to submit a query and add the objects
	                contained in its result set to a list that already exists on the server. This
	                facility places a couple of restrictions on the query itself, namely that
	                the view list may only contain a single item, which should refer to the
	                internal id attribute of an object in the query.
	            </description>
	            <param required="true" type="XML" description="A definition of the query to execute in Path-Query XML format.">query</param>
	            <param required="true" type="String" description="The list to append items to.">name</param>
	            <param required="false" type="String[]" description="A set of tags to use to categorise the new list">tags</param>
	            <returns>
	                <format accept="application/json">json</format>
	                <format accept="text/plain">text</format>
	            </returns>
	        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-query-upload</servlet-name>
    <servlet-class>org.intermine.webservice.server.query.QueryUploadServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-query-upload</servlet-name>
    <url-pattern>/service/query/upload</url-pattern>
    <metadata>
        <name>Save Query</name>
        <minVersion>4</minVersion>
        <method type="POST" authenticationRequired="true" ALSO="GET">
                <summary>Save queries to a user account on the server.</summary>
                <description>
                    This service provides the facility to submit one or more queries
                    and save it/them for future reference to a user account on the server.
                </description>
                <param required="true" type="XML" description="A definition of the query/ies to save in Path-Query XML format.">xml</param>
                <param required="false" type="Integer" description="The version of the path-qeury format being used.">version</param>
                <returns>
                    <format accept="application/json">json</format>
                    <format accept="text/plain">text</format>
                </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-lists</servlet-name>
    <servlet-class>org.intermine.webservice.server.core.ConfigurableWebServiceServlet</servlet-class>
  <init-param>
     <param-name>service</param-name>
     <param-value>org.intermine.webservice.server.lists.ListsService</param-value>
   </init-param>
   <init-param>
     <param-name>methods</param-name>
     <param-value>GET,POST</param-value>
   </init-param>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-lists</servlet-name>
    <url-pattern>/service/listswithobject/*</url-pattern>
    <metadata>
        <name>Find Lists Containing an Object</name>
        <minVersion>1</minVersion>
        <method type="POST" authenticationRequired="false" ALSO="GET">
                <summary>Find lists on the server containing an object.</summary>
                <description>
                    This service allows users to get back a list of
                    lists that contain a given object, either defined by an
                    internal ID, or looked up from stable identifiers.
                    If the request does not authenticate to a user account,
                    then only relevant public lists will be returned.
                </description>
                <param required="false" type="String" description="A stable identifier that can be used to find the object.">publicId</param>
                <param required="false" type="Integer" description="The internal DB id (changes on each re-release).">id</param>
                <param required="false"
                    type="String"
                    options="/model|model.classes"
                    default="{name}"
                    description="The type of object (required if using a public id)">type</param>
                <param required="false" type="String" description="An extra value to disambiguate objects">extraValue</param>
                <returns>
                    <format accept="application/json">json</format>
                    <format accept="text/html">html</format>
                    <format accept="text/plain">text</format>
                    <format accept="application/csv">csv</format>
                    <format accept="application/tsv">tab</format>
                </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-list-append</servlet-name>
    <servlet-class>org.intermine.webservice.server.core.ConfigurableWebServiceServlet</servlet-class>
  <init-param>
     <param-name>service</param-name>
     <param-value>org.intermine.webservice.server.lists.ListAppendService</param-value>
   </init-param>
   <init-param>
     <param-name>methods</param-name>
     <param-value>POST</param-value>
   </init-param>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-list-append</servlet-name>
    <url-pattern>/service/lists/append/*</url-pattern>
    <metadata>
      <name>Append to List</name>
      <minVersion>4</minVersion>
      <method type="POST" authenticationRequired="true">
        <summary>Add items to an existing list by identifiers</summary>
        <description>
            This service allows users to add new items to an existing
            list by uploading a set of identifiers. This is equivalent to
            creating a new list from a set of identifiers, and then performing
            the union operation on that list an existing one, if the resulant
            list replaced the existing list.
        </description>
        <param required="true"
            type="String"
            description="The name of the list to append to. The list must exist, and belong to you."
            options="/lists|lists{authorized,status=CURRENT}"
            default="{name}">name</param>
        <body description="Identifiers for objects to add to the list, tab, comma or newline separated.">
          <content type="text/plain">
            "even skipped"
            zen, bib
            hairless
          </content>
        </body>
        <returns>
          <format accept="application/json" key="list">json</format>
          <format accept="text/plain">text</format>
        </returns>
      </method>
    </metadata>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-list-union</servlet-name>
  <servlet-class>org.intermine.webservice.server.core.ConfigurableWebServiceServlet</servlet-class>
  <init-param>
     <param-name>service</param-name>
     <param-value>org.intermine.webservice.server.lists.ListUnionService</param-value>
   </init-param>
   <init-param>
     <param-name>methods</param-name>
     <param-value>GET,POST</param-value>
   </init-param>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-list-union</servlet-name>
  <url-pattern>/service/lists/union/*</url-pattern>
  <metadata>
      <name>List Union</name>
      <minVersion>4</minVersion>
      <method type="POST" authenticationRequired="true" ALSO="GET">
        <name>Combine Lists</name>
        <summary>Combine Two or More Lists through Union</summary>
        <description>
            This service allows users to create new lists which contain all the members
            contained in the set of input lists. The user must have access to all the input
            lists, but need not be the owner of any of them. A union of a single list with
            itself may be considered a copy.
        </description>
        <param required="true" type="String" description="The name of the list to create">name</param>
        <param required="true"
            type="String[]"
            description="The name of a source list."
            options="/lists|lists{status=CURRENT}"
            default="{name}">lists</param>
        <param required="false" type="String" description="A description of this new list">description</param>
        <param required="false" type="String[]" description="A set of tags to apply to the new list">tags</param>
        <returns>
          <format accept="application/json">json</format>
          <format accept="text/plain">text</format>
        </returns>
      </method>
  </metadata>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-list-subtract</servlet-name>
  <servlet-class>org.intermine.webservice.server.core.ConfigurableWebServiceServlet</servlet-class>
  <init-param>
     <param-name>service</param-name>
     <param-value>org.intermine.webservice.server.lists.ListSubtractionService</param-value>
   </init-param>
   <init-param>
     <param-name>methods</param-name>
     <param-value>GET,POST</param-value>
   </init-param>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-list-subtract</servlet-name>
  <url-pattern>/service/lists/subtract/*</url-pattern>
  <metadata>
      <name>List Subtraction</name>
      <minVersion>4</minVersion>
      <method type="POST" authenticationRequired="true" ALSO="GET">
        <summary>Subtract one List From Another</summary>
        <description>
            This service allows users to create new lists which contain only those elements
            which are present in one set of lists, and none of those elements which are present
            in another set of lists. This is what is typically thought of as subtraction, or more
            technically, the asymmetric difference of two sets. The user must supply the names of
            the lists to be used as either the source lists or the subtraction lists, as well as
            details for the new list to be created. The user must have access to all the named lists,
            but need not be the owner of any of them.
        </description>
        <param required="true" type="String" description="The name of the list to create">name</param>
        <param required="true" type="String[]"
            options="/lists|lists{status=CURRENT}"
            default="{name}"
            description="The name of a source list">references</param>
        <param required="true"
            options="/lists|lists{status=CURRENT}"
            default="{name}"
            type="String[]"
            description="The name of a list to exclude">subtract</param>
        <param required="false" type="String" description="A description of this new list">description</param>
        <param required="false" type="String[]" description="A set of tags to apply to the new list">tags</param>
        <returns>
          <format accept="application/json">json</format>
          <format accept="text/plain">text</format>
        </returns>
      </method>
  </metadata>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-list-intersect</servlet-name>
  <servlet-class>org.intermine.webservice.server.core.ConfigurableWebServiceServlet</servlet-class>
  <init-param>
     <param-name>service</param-name>
     <param-value>org.intermine.webservice.server.lists.ListIntersectionService</param-value>
   </init-param>
   <init-param>
     <param-name>methods</param-name>
     <param-value>GET,POST</param-value>
   </init-param>
   <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-list-intersect</servlet-name>
  <url-pattern>/service/lists/intersect/*</url-pattern>
  <metadata>
      <name>List Intersection</name>
      <minVersion>4</minVersion>
      <method type="POST" authenticationRequired="true">
        <name>Intersect Lists</name>
        <summary>Combine Two or More Lists through Intersection</summary>
        <description>
            This service allows users to create new lists which contain only those items
            which are members of all the source lists. The user must have access to all the input
            lists, but need not be the owner of any of them. An intersection of a single list
            may be considered a copy.
        </description>
        <param required="true" type="String" description="The name of the list to create">name</param>
        <param required="true" type="String[]"
            options="/lists|lists{status=CURRENT}"
            default="{name}"
            description="The name of a source list, or multiple list names concatenated with a ';' separator.">lists</param>
        <param required="false" type="String" description="A description of this new list">description</param>
        <param required="false" type="String[]" description="A set of tags to apply to the new list">tags</param>
        <returns>
          <format accept="application/json">json</format>
          <format accept="text/plain">text</format>
        </returns>
      </method>
  </metadata>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-list-diff</servlet-name>
  <servlet-class>org.intermine.webservice.server.core.ConfigurableWebServiceServlet</servlet-class>
  <init-param>
     <param-name>service</param-name>
     <param-value>org.intermine.webservice.server.lists.ListDifferenceService</param-value>
   </init-param>
   <init-param>
     <param-name>methods</param-name>
     <param-value>GET,POST</param-value>
   </init-param>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-list-diff</servlet-name>
  <url-pattern>/service/lists/diff/*</url-pattern>
  <metadata>
      <name>List Difference</name>
      <minVersion>4</minVersion>
      <method type="POST" authenticationRequired="true">
        <name>Symmetric Difference</name>
        <summary>Combine Two or More Lists through Difference</summary>
        <description>
            This service allows users to create new lists which only contain members which are not shared
            by an even number of lists (see: http://en.wikipedia.org/wiki/Symmetric_difference).
            The user must have access to all the input lists, but need not be the owner of any of them.
        </description>
        <param required="true" type="String" description="The name of the list to create">name</param>
        <param required="true" type="String[]"
            options="/lists|lists{status=CURRENT}"
            default="{name}"
            description="The name of a source list">lists</param>
        <param required="false" type="String" description="A description of this new list">description</param>
        <param required="false" type="String[]" description="A set of tags to apply to the new list">tags</param>
        <returns>
          <format accept="application/json">json</format>
          <format accept="text/plain">text</format>
        </returns>
      </method>
  </metadata>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-available-lists</servlet-name>
  <servlet-class>org.intermine.webservice.server.lists.AvailableListsServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-available-lists</servlet-name>
    <url-pattern>/service/lists/*</url-pattern>
    <metadata>
        <name>Lists</name>
        <minVersion>4</minVersion>
        <method type="GET" authenticationRequired="false">
                <summary>Find lists on the server.</summary>
                <description>
                    This service allows users to get back a list of
                    lists that they have access to. The lists can be optionally
                    be filtered on the server by name, thus returning just a single
                    name, or if '*' wildcards are used, a subset of all lists.
                </description>
                <param required="false" type="String" description="An optional filter by name.">name</param>
                <returns>
                    <format key="lists" accept="application/json">json</format>
                    <format accept="text/html">html</format>
                    <format accept="text/plain">text</format>
                    <format accept="application/csv">csv</format>
                    <format accept="application/tsv">tab</format>
                </returns>
        </method>
        <method type="DELETE" authenticationRequired="true">
            <summary>Delete an existing list</summary>
            <description>
                This service allows users to delete
                lists that belong to them.
            </description>
            <param required="true" type="String"
                options="/lists|lists{authorized}"
                default="{name}"
                description="The name of the list to delete">name</param>
	        <returns>
	          <format accept="application/json">json</format>
	          <format accept="text/plain">text</format>
	        </returns>
        </method>
        <method type="POST" authenticationRequired="true">
	        <summary>Create a new list</summary>
	          <description>
	            This service allows users to create a new
	            list by uploading a set of identifiers. 
                The list is created by using the default settings
                of the ID resolution mechanism and then taking
                all the good matches.
	          </description>
              <param required="true"
                  type="String"
                  description="The name of the new list">name</param>
            <param required="true"
                options="/model|model.classes"
                default="{name}"
                type="String" description="The type of the list">type</param>
            <param
              description="Whether or not to replace any existing list of this name"
              required="false"
              type="boolean"
              default="false">replaceExisting</param>
            <param required="false"
                type="String"
                description="A disambiguating value (such as organism name)">extraValue</param>
	        <body description="Identifiers for objects to add to the list, tab, comma or newline separated.">
             <content type="text/plain">
              "even skipped"
              zen, bib
              hairless
             </content>
            </body>
	        <returns>
	          <format accept="application/json">json</format>
	          <format accept="text/plain">text</format>
	        </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-rename-list</servlet-name>
  <servlet-class>org.intermine.webservice.server.lists.ListRenameServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-rename-list</servlet-name>
  <url-pattern>/service/lists/rename/*</url-pattern>
  <metadata>
    <name>List Renaming</name>
    <minVersion>4</minVersion>
    <method type="GET" authenticationRequired="false" ALSO="POST">
      <summary>Rename an Existing List</summary>
      <description>
        This service allows users to change the name of an existing list that
        they are the owner of.
      </description>
      <param required="true" type="String"
          options="/lists|lists{authorized}"
          default="{name}"
          description="The current name of the list">oldname</param>
      <param required="true" type="String" description="The name the list should have">newname</param>
      <returns>
        <format accept="application/json">json</format>
      </returns>
    </method>
  </metadata>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-template-upload</servlet-name>
  <servlet-class>org.intermine.webservice.server.template.TemplateUploadServlet</servlet-class>
  <init-param>
    <param-name>debug</param-name>
    <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-template-upload</servlet-name>
    <url-pattern>/service/template/upload</url-pattern>
    <metadata>
      <name>Template Upload</name>
      <method type="POST" authenticationRequired="true" ALSO="GET">
        <summary>Save a Template, or Overwrite an Existing One</summary>
        <description>
          This service allows users to save templates they have authored on the server, associated
          with their account. The templates once saved can be used as any other template query.
        </description>
        <param type="XML" required="true" description="One or more templates, serialised in XML format.">xml</param>
        <param type="Integer" required="false" default="2" min="1" max="2" description="The version of the XML format">version</param>
        <returns>
          <format accept="text/plain">text</format>
          <format accept="application/json">json</format>
          <format accept="text/html">html</format>
          <format accept="application/xml">xml</format>
        </returns>
      </method>
    </metadata>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-template-results</servlet-name>
  <servlet-class>org.intermine.webservice.server.template.result.TemplateResultServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-template-results</servlet-name>
    <url-pattern>/service/template/results</url-pattern>
    <metadata>
      <name>Template Results</name>
      <method type="GET" ALSO="POST" authenticationRequired="false">
        <summary>Get the results from running a template with a given set of parameters</summary>
        <description format="markdown">
Templates are predefined parameterised queries which may be run by supplying values and
operators for the available editable constraints. The editable constraints vary from 
template to template, so knowledge of these (obtainable by calls to `/templates`)
is required to use this service correctly.

Users should provide parameters of the form `constraint{N}`, `op{N}`, `value{N}`
and `extra{N}` for each editable contraint, where `N` represents a number to group
the values. The value of the `constraint{N}` parameter serves to identify
the constraint, and may not be changed. Values for `op{N}` and `value{N}` must be
given, and may be anything the user requires.

To run a template, for example which has the following editable constraints:
```
&lt;constraint path="Gene.symbol" op="=" value="eve" editable="true"/&gt;
&lt;constraint path="Gene.length" op="&amp;gt;" value="1000" editable="true"/&gt;
```

Then the user should supply the following parameters to run it with the above values:

| Parameter           | Value            |
|---------------------|------------------|
| constraint1         | Gene.symbol      |
| op1                 | eq               |
| value1              | eve              |
| constraint2         | Gene.length      |
| op2                 | gt               |
| value2              | 1000             |

The value of the number used to identify each constraint is ignored - it must however be
consistent for each parameter. One set of template constraint parameters is required
for each editable constraint on the query. These are not required for optional constraints.
        </description>
        <param type="String"
            required="true"
            description="The name of the template to run"
            options="/templates|templates"
            default="{name}">name</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply constraint paths"
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{path}">constraint{N}</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply constraint operators"
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{op}">op{N}</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply constraint values"
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{value}">value{N}</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply constraint codes. Codes are only required if two constraints have the same path."
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{code}">code{N}</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply extra constraint values (used by LOOKUP constraints)"
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{extraValue}">extra{N}</param>
        <param type="Integer" required="false" default="0" min="0" description="The index of the first result to return.">start</param>
        <param type="Integer" required="false" default="10" description="The maximum size of the result set.">size</param>
        <param type="enumerated"
               values="none,path,friendly" 
               default="none"
               required="false"
               description="Include column headers. Use friendly for human readable paths. (Only for flat-file formats)">columnheaders</param>
        <returns>
          <format accept="application/tsv">tab</format>
          <format accept="application/csv">csv</format>
          <format accept="text/count">count</format>
          <format accept="application/json" key="results">json</format>
          <format accept="application/json;type=objects" key="results">jsonobjects</format>
          <format accept="application/json;type=count" key="count">jsoncount</format>
          <format accept="application/xml">xml</format>
          <format accept="text/html">html</format>
        </returns>
      </method>
    </metadata>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-template-to-list</servlet-name>
  <servlet-class>org.intermine.webservice.server.template.TemplateToListServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-template-to-list</servlet-name>
  <url-pattern>/service/template/tolist/*</url-pattern>
  <metadata>
      <name>Template to list</name>
      <method type="GET" ALSO="POST" authenticationRequired="true">
        <summary>Create a List from the Output of a Template</summary>
        <description format="markdown">
This service allows the user to create a list from the result set of running a template
with a given set of parameters. The parameters for running the template are the same as when
requesting results (see documentation for `template-results`), and in addition to these
parameters the user needs to supply a name and optional description for the list to be created. 

To define which part of the template results to use, the user must supply a path parameter which
indicates a valid column from the output to be used.

Users should provide parameters of the form `constraint{N}`, `op{N}`, `value{N}`
and `extra{N}` for each editable contraint, where `N` represents a number to group
the values. The value of the `constraint{N}` parameter serves to identify
the constraint, and may not be changed. Values for `op{N}` and `value{N}` must be
given, and may be anything the user requires.

To run a template, for example which has the following editable constraints:
```
&lt;constraint path="Gene.symbol" op="=" value="eve" editable="true"/&gt;
&lt;constraint path="Gene.length" op="&amp;gt;" value="1000" editable="true"/&gt;
```

Then the user should supply the following parameters to run it with the above values:

| Parameter           | Value            |
|---------------------|------------------|
| constraint1         | Gene.symbol      |
| op1                 | eq               |
| value1              | eve              |
| constraint2         | Gene.length      |
| op2                 | gt               |
| value2              | 1000             |

The value of the number used to identify each constraint is ignored - it must however be
consistent for each parameter. One set of template constraint parameters is required
for each editable constraint on the query. These are not required for optional constraints.
        </description>
        <param type="String"
            required="true"
            description="The name of the template to run"
            options="/templates|templates"
            default="{name}">name</param>
        <param type="String"
            required="true"
            options="/templates|templates.$name.select"
            default="{}"
            description="The path to use to compose the results. This should be one of the selected view paths.">path</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply constraint paths"
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{path}">constraint{N}</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply constraint operators"
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{op}">op{N}</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply constraint values"
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{value}">value{N}</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply constraint codes. Codes are only required if two constraints have the same path."
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{code}">code{N}</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply extra constraint values (used by LOOKUP constraints)"
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{extraValue}">extra{N}</param>
        <param required="true"
            type="String"
            description="The name for the new list. There must be no existing list of this name">listName</param>
        <param required="false" type="String" description="A description to attach to the new list">description</param>
        <param required="false" type="String[]" description="A set of tags to use to categorise the new list">tags</param>
          <param
              description="Whether or not to replace any existing list of this name"
              required="false"
              type="boolean"
              default="false">replaceExisting</param>
        <returns>
          <format accept="application/json">json</format>
          <format accept="text/plain">text</format>
        </returns>
      </method>
    </metadata>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-template-append</servlet-name>
  <servlet-class>org.intermine.webservice.server.template.TemplateListAppendServlet</servlet-class>
  <init-param>
    <param-name>debug</param-name>
    <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-template-append</servlet-name>
    <url-pattern>/service/template/append/tolist/*</url-pattern>
    <metadata>
      <name>Append to List from Template Results</name>
      <minVersion>4</minVersion>
      <method type="POST" ALSO="GET" authenticationRequired="true">
        <summary>Add items to a list from a set of results from running a template</summary>
        <description format="markdown">
This service allows the user to add items to a list from the result set of running a template
with a given set of parameters. The parameters for running the template are the same as when
requesting results, and in addition to these parameters the user needs to supply the name 
of a list to append the results to.

To define which part of the template results to use, the user must supply a path parameter which
indicates a valid column from the output to be used.

Users should provide parameters of the form `constraint{N}`, `op{N}`, `value{N}`
and `extra{N}` for each editable contraint, where `N` represents a number to group
the values. The value of the `constraint{N}` parameter serves to identify
the constraint, and may not be changed. Values for `op{N}` and `value{N}` must be
given, and may be anything the user requires.

To run a template, for example which has the following editable constraints:
```
&lt;constraint path="Gene.symbol" op="=" value="eve" editable="true"/&gt;
&lt;constraint path="Gene.length" op="&amp;gt;" value="1000" editable="true"/&gt;
```

Then the user should supply the following parameters to run it with the above values:

| Parameter           | Value            |
|---------------------|------------------|
| constraint1         | Gene.symbol      |
| op1                 | eq               |
| value1              | eve              |
| constraint2         | Gene.length      |
| op2                 | gt               |
| value2              | 1000             |

The value of the number used to identify each constraint is ignored - it must however be
consistent for each parameter. One set of template constraint parameters is required
for each editable constraint on the query. These are not required for optional constraints.
        </description>
        <param type="String"
            required="true"
            description="The name of the template to run"
            options="/templates|templates"
            default="{name}">name</param>
        <param type="String"
            required="true"
            options="/templates|templates.$name.select"
            default="{}"
            description="The path to use to compose the results. This should be one of the selected view paths.">path</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply constraint paths"
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{path}">constraint{N}</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply constraint operators"
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{op}">op{N}</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply constraint values"
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{value}">value{N}</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply constraint codes. Codes are only required if two constraints have the same path."
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{code}">code{N}</param>
        <param type="String[]"
            description="One of a variable set of parameters used to supply extra constraint values (used by LOOKUP constraints)"
            required="false"
            repeat="/templates|templates.$name.where{editable}"
            default="{extraValue}">extra{N}</param>
        <param required="true"
            type="String"
            options="/lists|lists{authorized}"
            default="{name}"
            description="The name of the list to add items to.">listName</param>
        <returns>
          <format accept="application/json">json</format>
          <format accept="text/plain">text</format>
        </returns>
      </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-template</servlet-name>
    <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
    <init-param>
       <param-name>GET</param-name>
       <param-value>org.intermine.webservice.server.template.AvailableTemplatesService</param-value>
    </init-param>
    <init-param>
       <param-name>POST</param-name>
       <param-value>org.intermine.webservice.server.template.TemplateUploadService</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-template</servlet-name>
    <url-pattern>/service/templates</url-pattern>
    <metadata>
        <name>Templates</name>
        <method type="GET" authenticationRequired="false">
            <summary>Get the list of available templates.</summary>
            <description format="markdown">
Get a listing of the templates configured in an InterMine instance.
Each template contains a description of its properties, defining the
parameters that must be provided to run it, as well as a definition of the
output format for its results.

If the request is authenticated to a user, then the templates that that has access
to will also be returned.
            </description>
            <param required="false" type="boolean" default="false" description="Whether or not to include invalid templates. Invalid templates cannot be run.">includeBroken</param>
            <returns>
                <format>xml</format>
                <format key="templates">json</format>
            </returns>
        </method>
        <method type="POST" authenticationRequired="true">
            <summary>Upload one or more templates.</summary>
            <description>
                Upload a set of templates to the current user profile.
            </description>
            <param required="false" type="XML" default="" description="The xml to load, if using form parameters.">xml</param>
            <body description="The templates to upload. If using body content.">
             <content type="application/xml">
                &lt;template name="my-new-template"&gt;
                    &lt;query model="genomic" view="Gene.symbol Gene.proteins.proteinDomains.name"&gt;
                        &lt;constraint editable="true" path="Gene" op="LOOKUP" value="eve"/&gt;
                    &lt;/query&gt;
                &lt;/template&gt;
             </content>
            </body>
            <returns>
                <format>xml</format>
                <format>json</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-model</servlet-name>
    <servlet-class>org.intermine.webservice.server.model.ModelServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-model</servlet-name>
    <url-pattern>/service/model/*</url-pattern>
    <metadata>
        <name>Data Model</name>
        <method type="GET" authenticationRequired="false">
            <summary>Get a description of the data model</summary>
            <description>
                An InterMine data model can be fully described as a set of classes
                with various properties. This data model is useful for constructing
                queries and interpreting the results returned from the service.
            </description>
            <returns>
                <format>xml</format>
                <format key="model">json</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-version</servlet-name>
    <servlet-class>org.intermine.webservice.server.VersionServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-version</servlet-name>
    <url-pattern>/service/version/*</url-pattern>
    <metadata>
        <name>Web-Service Version</name>
        <method type="GET" authenticationRequired="false">
           <summary>Get the Web-Service Version.</summary>
           <description>
               Get the web-service version number. This number is incremented for
               each change in functionality.
           </description>
           <returns>
             <format>text</format>
             <format key="version">json</format>
           </returns>
       </method>
       <method type="GET" authenticationRequired="false" slug="/release">
           <summary>Get the Data-Warehouse Release Version.</summary>
           <description>
               Get the release version of the data-warehouse. This is a string that is changed
               each time data is added or removed from the server. Thus this number is meant
               to reflect the contents rather than the interface of this set of services.
           </description>
           <returns>
             <format>text</format>
             <format key="version">json</format>
           </returns>
       </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-check-resource</servlet-name>
    <servlet-class>org.intermine.webservice.server.AvailableServicesServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-check-resource</servlet-name>
    <url-pattern>/service/check/*</url-pattern>
    <metadata>
        <deprecated/>
        <name>Check Resource</name>
        <method type="GET" slug="/:resource">
            <summary>Find out where a resource is mounted</summary>
            <description>
                This service is deprecated. Use the full service listing instead.
            </description>
            <param
                required="true"
                type="String"
                description="The resource to locate">resource</param>
            <returns>
                <format accept="text/plain">text</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <!-- NEW IN VERSION 6 -->

  <servlet>
    <servlet-name>ws-possible-values</servlet-name>
    <servlet-class>org.intermine.webservice.server.path.PossibleValuesServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-possible-values</servlet-name>
    <url-pattern>/service/path/values</url-pattern>
    <metadata>
        <name>Possible Values</name>
        <minVersion>6</minVersion>
        <method type="GET" authenticationRequired="false" ALSO="POST">
           <summary>Get the possible values a path may have.</summary>
           <description>
               This service provides the possible values that a path may represent
               in the database. This functionality is expected to primarily useful for
               applications providing completion and suggestions for user-input.
           </description>
           <param type="String" required="true" description="The path whose possible values are requested">path</param>
           <param type="JSON" required="false" description="A json object mapping which describes the type constraints on this path">typeConstraints</param>
           <returns>
             <format accept="application/json" key="results">json</format>
             <format accept="application/json;type=count" key="count">jsoncount</format>
             <format accept="text/plain;type=count">count</format>
           </returns>
       </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-schemata</servlet-name>
    <servlet-class>org.intermine.webservice.server.SchemaServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-schemata</servlet-name>
    <url-pattern>/service/schema/*</url-pattern>
    <metadata>
        <name>Schemata</name>
        <minVersion>6</minVersion>
        <method type="GET">
            <name>All Schemata</name>
            <summary>Get all Schemata</summary>
            <description>Get a listing of the available schemata</description>
            <returns>
                <format accept="application/json">json</format>
            </returns>
        </method>
        <method type="GET" slug="/:name">
            <name>One Schema</name>
            <summary>Get one Schema</summary>
            <description>Retrieve a specific schema</description>
            <param
                required="true"
                options="/schema|schemata"
                default="{}"
                description="The name of the schema to retrieve">name</param>
        </method>
    </metadata>
  </servlet-mapping>

  <!-- NEW IN VERSION 7 -->

  <servlet>
    <servlet-name>ws-summary-fields</servlet-name>
    <servlet-class>org.intermine.webservice.server.SummaryServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-summary-fields</servlet-name>
    <url-pattern>/service/summaryfields</url-pattern>
    <metadata>
        <name>Summary Fields</name>
        <minVersion>7</minVersion>
        <method type="GET" authenticationRequired="false">
           <summary>Get the fields used to summarise the class</summary>
           <param type="Boolean" required="false" default="false" description="Whether to exclude references from the summary fields">norefs</param>
	       <returns>
	         <format key="classes">json</format>
	       </returns>
       </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-code-gen</servlet-name>
    <servlet-class>org.intermine.webservice.server.query.CodeServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-code-gen</servlet-name>
    <url-pattern>/service/query/code</url-pattern>
    <metadata>
        <name>Generated Code</name>
        <minVersion>7</minVersion>
        <method type="GET" ALSO="POST" authenticationRequired="false">
            <summary>Get the code to run a pathquery in a given language.</summary>
            <description>
	            This service provides the ability to generate code in one of several
	            languages based on a pathquery provided in serialised form.
	        </description>
            <param type="enumerated" default="py" values="pl,py,rb,js,java" required="true" description="The language to generate code in.">lang</param>
            <param type="XML" required="true" description="The query to generate code for, in XML form." schema="/service/schema/query.xsd">query</param>
            <returns>
                <format accept="text/plain">text</format>
	            <format accept="application/json" key="code">json</format>
	            <format accept="application/xml">xml</format>
	        </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-list-tags</servlet-name>
    <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
    <init-param>
        <param-name>GET</param-name>
        <param-value>org.intermine.webservice.server.lists.ListTagService</param-value>
    </init-param>
    <init-param>
        <param-name>POST</param-name>
        <param-value>org.intermine.webservice.server.lists.ListTagAddingService</param-value>
    </init-param>
    <init-param>
        <param-name>DELETE</param-name>
        <param-value>org.intermine.webservice.server.lists.ListTagRemovalService</param-value>
    </init-param>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-list-tags</servlet-name>
    <url-pattern>/service/list/tags/*</url-pattern>
    <metadata>
        <name>List Tags</name>
        <minVersion>7</minVersion>
        <method authenticationRequired="false" type="GET" >
            <summary>Get the tags for a list, or all the tags for a given user</summary>
            <description>
                Fetch an up-to-date list of all tags associated with a list, or all lists.
            </description>
            <param type="String" required="false" description="The name of a list whose tags to retrieve. If no list is provided, then all the tags associated with the authenticating user will be returned.">name</param>
            <returns>
	            <format key="tags">json</format>
	            <format>xml</format>
	            <format>tab</format>
	            <format>csv</format>
	        </returns>
        </method>
        <method authenticationRequired="true" type="POST">
            <summary>Add one or more tags to a list</summary>
            <param type="String" required="true" description="The name of a list to add the tag(s) to.">name</param>
            <param type="String" required="true" description="The name of the tags to add. It should take to from of a semi-colon delimited concatenation of the tag names.">tags</param>
            <returns>
                <format key="tags">json</format>
                <format>xml</format>
                <format>tab</format>
                <format>csv</format>
            </returns>
        </method>
        <method authenticationRequired="true" type="DELETE">
            <summary>Delete one or more tags from a list</summary>
            <param type="String" required="true" description="The name of a list to add the tag(s) to.">name</param>
            <param type="String" required="true" description="The name of the tags to remove. It should take to from of a semi-colon delimited concatenation of the tag names.">tags</param>
            <returns>
                <format key="tags">json</format>
                <format>xml</format>
                <format>tab</format>
                <format>csv</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <!-- NEW IN VERSION 8 -->

  <servlet>
  <servlet-name>ws-available-widgets</servlet-name>
    <servlet-class>org.intermine.webservice.server.widget.AvailableWidgetsServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-available-widgets</servlet-name>
    <url-pattern>/service/widgets/*</url-pattern>
    <metadata>
        <name>Widgets</name>
        <minVersion>8</minVersion>
        <method authenticationRequired="false" type="GET">
            <summary>Get a list of the widgets available at a service</summary>
            <description>
                This service returns a list of the widgets that are available at a
                given service. Each entry for the widget includes details of its type,
                the kind of data it processes, and any filters it accepts.
            </description>
            <returns>
	            <format key="widgets">json</format>
	            <format>xml</format>
	            <format>tab</format>
	            <format>csv</format>
	        </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-service-listing</servlet-name>
    <servlet-class>org.intermine.webservice.server.ServicesListingsServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet>
    <servlet-name>ws-widgets</servlet-name>
    <servlet-class>org.intermine.webservice.server.widget.WidgetsServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-widgets</servlet-name>
    <url-pattern>/service/list/enrichment/*</url-pattern>
    <metadata>
        <name>Enrichment Widgets</name>
        <minVersion>8</minVersion>
        <method authenticationRequired="false" type="GET" ALSO="POST">
            <summary>get the data for a given enrichment widget</summary>
            <description>
                Enrichment widgets provide a statistical summary of what makes a list distinct from
                the background population over a certain domain. They return a list of members of the
                domain ranked by p-value (low to high).
            </description>
            <param type="String"
                required="true"
                description="The name of the list to investigate"
                options="/lists|lists{status=CURRENT}"
                default="{name}">list</param>
            <param type="String"
                required="true"
                description="The name of the enrichment widget to display"
                options="/widgets|widgets{widgetType=enrichment}"
                default="{name}">widget</param>
            <param type="String"
                required="false"
                description="The name of the list to use as the background population"
                options="/lists|lists{status=CURRENT}"
                default="{name}">population</param>
            <param type="Float"
                default="0.05"
                required="true"
                description="The maximum p-value of results to display. The range is 0.0 - 1.0">maxp</param>
            <param type="enumerated"
                values="Holm-Bonferroni,Benjamini and Hochberg,Bonferroni,None"
                default="Holm-Bonferroni"
                required="true"
                description="The error correction algorithm to use.">correction</param>
            <param type="String"
                required="false"
                options="/widgets|widgets{name=$name}.0.filters"
                description="An optional filter that some widgets accept">filter</param>
            <returns>
	            <format key="results">json</format>
	            <format>xml</format>
	            <format>tab</format>
	            <format>csv</format>
	        </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-list-graphs</servlet-name>
    <servlet-class>org.intermine.webservice.server.widget.GraphWidgetsServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-list-graphs</servlet-name>
    <url-pattern>/service/list/chart/*</url-pattern>
    <!-- Custom extensions that allow us to automatically generate documentation -->
    <metadata>
        <name>Graphical Widgets</name>
        <minVersion>8</minVersion>
        <method type="GET" authenticationRequired="false" ALSO="POST">
            <summary>get the data to produce a graph</summary>
            <description>
	           This service returns data that can be passed to charting software, such
	           as Google's javascript Charts API, to produce graphical representations
	           of the overview of data in a list.
	        </description>
            <param type="String"
                required="true"
                options="/lists|lists{status=CURRENT}"
                description="The name of the list to investigate"
                default="{name}">list</param>
            <param type="String"
                required="true"
                description="The name of the graphical widget to display"
                options="/widgets|widgets{widgetType=chart}"
                default="{name}">widget</param>
            <param type="String" required="false" description="An optional filter that some widgets accept">filter</param>
	        <returns>
	            <format key="results">json</format>
	            <format>xml</format>
	        </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-list-table</servlet-name>
    <servlet-class>org.intermine.webservice.server.widget.TableWidgetsServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-list-table</servlet-name>
    <url-pattern>/service/list/table/*</url-pattern>
    <!-- Custom extensions that allow us to automatically generate documentation -->
    <metadata>
        <name>Table Widgets</name>
        <minVersion>8</minVersion>
        <method type="GET" authenticationRequired="false" ALSO="POST">
            <summary>Get the data as displayed by a table widget</summary>
            <description>
	            This service returns data to produce a table representations
	            of the overview of data in a list.
	        </description>
            <param type="String" required="true"
                options="/lists|lists{status=CURRENT}"
                default="{name}"
                description="The name of the list to use as the population for the graph">list</param>
            <param type="String" required="true" description="The name of the graphical widget to display">widget</param>
            <returns>
	            <format key="results">json</format>
	            <format>xml</format>
	        </returns>
        </method>
    </metadata>
  </servlet-mapping>

   <!-- NEW IN VERSION 9 -->

  <servlet>
    <servlet-name>ws-quick-search</servlet-name>
    <servlet-class>org.intermine.webservice.server.search.QuickSearchServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-quick-search</servlet-name>
    <url-pattern>/service/search</url-pattern>
    <!-- Custom extensions that allow us to automatically generate documentation -->
    <metadata>
        <name>QuickSearch</name>
        <minVersion>9</minVersion>
        <method authenticationRequired="false" type="GET" ALSO="POST">
            <summary>Perform a key-word search and retrieve the results</summary>
            <description>
                Run a general key-word style search over all data in the data-warehouse.
                Rather than a structured query for a specific type of data, this allows
                the user to search broadly over a range of data types, and use
                facetting information to restrict the search results.
            </description>
            <param type="String" required="false" description="The query string to search with. If absent, or blank, all results will be returned">q</param>
            <param type="int" required="false" description="The maximum number of records to return. If no limit is provided, up to 100 results will be returned." default="10">size</param>
            <param type="int" required="false" description="The index of the first result to return." default="0">start</param>
            <param type="String"
                options="/lists|lists{status=CURRENT}"
                default="{name}"
                required="false" description="A list to search within.">list</param>
            <param type="String[]" required="false" description="A facet parameter, eg facet_Organism=D.melanogaster">facet_?</param>
            <returns>
              <format key="results">json</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

    <servlet>
    <servlet-name>ws-whoami</servlet-name>
    <servlet-class>org.intermine.webservice.server.user.WhoAmIServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-whoami</servlet-name>
    <url-pattern>/service/user/whoami</url-pattern>
    <!-- Custom extensions that allow us to automatically generate documentation -->
    <metadata>
        <name>Who-Am-I?</name>
        <minVersion>9</minVersion>
        <method authenticationRequired="true" type="GET">
            <summary>Get details about the authenticated user</summary>
	        <description>
	            Retrieve information about the currently authenticated user. This can
	            be used to display the user's name.
	        </description>
	        <returns>
                <format key="user">json</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-24hr-token</servlet-name>
    <servlet-class>org.intermine.webservice.server.user.TokenServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-24hr-token</servlet-name>
    <url-pattern>/service/user/token</url-pattern>
    <!-- Custom extensions that allow us to automatically generate documentation -->
    <metadata>
        <name>Token</name>
        <minVersion>9</minVersion>
        <method type="GET" authenticationRequired="true">
            <summary>Get a new API key</summary>
	        <description>
	            This service allows a user to retrieve an API token which is valid
	            for up to 24 hours of unlimited use. The primary use case is to
	            get an API key where the user has only username/password credentials,
	            since the use of API keys is more secure.
	        </description>
	        <returns>
	            <format key="token">json</format>
	        </returns>
        </method>
    </metadata>
  </servlet-mapping>


  <servlet>
    <servlet-name>ws-new-user</servlet-name>
    <servlet-class>org.intermine.webservice.server.user.NewUserServlet</servlet-class>
    <!--
    This config should be used when there are some tests set up for it. 
    <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
     <init-param>
        <param-name>POST</param-name>
        <param-value>org.intermine.webservice.server.user.NewUserService</param-value>
     </init-param>
    -->
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-new-user</servlet-name>
    <url-pattern>/service/users</url-pattern>
    <!-- Custom extensions that allow us to automatically generate documentation -->
    <metadata>
      <name>Users</name>
      <minVersion>9</minVersion>
      <method type="POST" authenticationRequired="false">
          <name>User Creation</name>
          <summary>Create a new user in the user-profile</summary>
          <description>
		      This service allows users of the web service to create a new user account.
		      A user account is required for a number of operations, such as saving
		      lists. This service allows users of the webservice to register an account, and
		      start using these features that require authentication. The username and
		      password provided will be able to be used for future requests, as will
		      an API key provided with the response, which is valid for 24 hours.
              This is equivalent to the registration mechanism in the web-application interface.
              Requests to this service are rate limited by IP Address
          </description>
          <param type="Email" required="true" description="The user name of the new user. It should be an email address if possible. There must not be any user with the same username">name</param>
          <param type="String" required="true" description="A password to associate with the account.">password</param>
          <param type="boolean" required="false" description="Whether or not to subscribe to the mine's mailing list, if it has one. The username must be an email address if true">subscribe-to-list</param>
          <returns>
            <format key="user">json</format>
          </returns>
      </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-classkeys</servlet-name>
    <servlet-class>org.intermine.webservice.server.ClassKeyServlet</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-classkeys</servlet-name>
    <url-pattern>/service/classkeys/*</url-pattern>
    <metadata>
        <name>Key Fields</name>
        <minVersion>9</minVersion>
        <method type="GET" authenticationRequired="false">
            <summary>Get the fields used to identify an object</summary>
            <description>
                Get the fields configured for this service to identify objects uniquely within
                the database.
            </description>
            <returns>
                <format key="classes">json</format>
            </returns>
       </method>
    </metadata>
  </servlet-mapping>

      <!-- NEW IN VERSION 10 -->
      
   <servlet>
     <servlet-name>ws-id-resolver</servlet-name>
     <servlet-class>org.intermine.webservice.server.idresolution.IdResolutionServlet</servlet-class>
   </servlet>

   <servlet-mapping>
     <servlet-name>ws-id-resolver</servlet-name>
     <url-pattern>/service/ids/*</url-pattern>
      <metadata>
        <name>ID Resolution</name>
        <minVersion>10</minVersion>
        <method type="POST" authenticationRequired="true">
          <name>Submit Job</name>
          <summary>Start a New ID Resolution Job on the Server</summary>
          <description format="markdown">
New ID resolution jobs are created by posting a representation of the job to this
service. Jobs are run asynchronously, so this service simply submits the
job, and returns the identifier of the job, so that its results and status
may be polled later.

A job is a data structure (represented as `json`) that satisfies the
following [json-schema](http://json-schema.org/) schema:

```
{
    "type": "object",
    "required": ["identifiers", "type"],
    "properties": {
        "identifiers": {
            "type": "array",
            "items": { "type": "string" },
            "minItems": 1,
            "uniqueItems": true
        },
        "type":          { "type": "string"  },
        "extra":         { "type": "string"  },
        "caseSensitive": { "type": "boolean" },
        "wildCards":     { "type": "boolean" }
    }
}
```
          </description>
          <body
            description="A representation of the job. This must include a list of identifiers to resolve, and the type of object these ids are meant to resolve to">
              <content type="application/json" schema="/schema/job.schema">
                {
                  "identifiers": ["eve", "zen", "bib"],
                  "type": "Gene",
                  "caseSensitive": true,
                  "wildCards": true,
                  "extra": "D. melanogaster"
                }
              </content>
           </body>
           <returns>
             <format key="uid">json</format>
           </returns>
        </method>
        <method type="GET" authenticationRequired="true" slug="/:uid/status">
            <name>Check Job Status</name>
            <summary>Check the Status of a Given Job</summary>
            <description>Get a representation of the status of job.</description>
            <param type="String" required="true" description="The unique identifier of the job">uid</param>
            <returns>
              <format key="status" accept="application/json">json</format>
            </returns>
        </method>
        <method type="GET" authenticationRequired="true" slug="/:uid/results">
            <name>Retrieve Job Results</name>
            <summary>Get the Results of a Given Job</summary>
            <description>Get the full results of running a specific job.</description>
            <param type="String" required="true" description="The unique identifier of the job">uid</param>
            <returns>
              <format key="results" accept="application/json">json</format>
            </returns>
        </method>
        <method type="DELETE" authenticationRequired="true" slug="/:uid">
            <name>Delete A Job</name>
            <summary>Delete a given job from the server.</summary>
            <description>Each job should be removed from the server when the user has finished inspecting the results.</description>
            <param type="String" required="true" description="The unique identifier of the job">uid</param>
            <returns>
              <format accept="application/json">json</format>
            </returns>
        </method>
      </metadata>
   </servlet-mapping>
   
   <!-- NEW IN VERSION 11 -->
   
   <servlet>
     <servlet-name>ws-list-invitations</servlet-name>
     <servlet-class>org.intermine.webservice.server.lists.ListSharingInvitationServlet</servlet-class>
   </servlet>
   
   <servlet-mapping>
     <servlet-name>ws-list-invitations</servlet-name>
     <url-pattern>/service/lists/invitations/*</url-pattern>
     <metadata>
       <name>List Invitations</name>
       <minVersion>11</minVersion>
       <method type="POST" authenticationRequired="true">
          <name>Invitation Creation</name>
          <summary>Invite another user to share a list</summary>
          <description format="markdown">
              This service allows users to share one of their lists with another user.
              This allows read-only access to the given list, allowing it to be used in
              queries, exported, etc. You should only do this if you trust the other
              party with your data.

              Users can be designated by their username, display-name (if set) or by 
              and email address. If the email address is not registered with a user in
              the system, an invitation will be sent to that address, with a code that
              allows the user to activate the list share.
          </description>
          <param type="String" required="true" description="The list of yours you wish to share"
              options="/lists|lists{status=CURRENT,authorized}"
              default="{name}"
              >list</param>
          <param type="String" required="true" description="The email address of the user to invite to share a list.">to</param>
          <param type="boolean"
              required="false"
              default="false"
              description="Whether or not to send an email to the invitee. The invitee value must be an email address if true">notify</param>
          <returns>
            <format key="invitation">json</format>
          </returns>
      </method>
      <method type="GET" authenticationRequired="true">
          <name>Invitation Details</name>
          <summary>Details of all outstanding invitations</summary>
          <description>
            This service returns a description of all the outstanding list invitations
            for a user on the system.
          </description>
          <returns>
            <format key="invitation">json</format>
          </returns>
      </method>
      <method type="GET" authenticationRequired="true" slug="/:uid">
          <name>Invitation Details</name>
          <summary>Details of a single invitation</summary>
          <description>
            This service returns details of a single invitation on the system.
          </description>
          <param type="String" required="true" description="The identifier of the invitation - a 20 character unique string">uid</param>
          <returns>
            <format key="invitation">json</format>
          </returns>
      </method>
      <method type="PUT" authenticationRequired="true" slug="/:uid">
          <name>Invitation Acceptance</name>
          <summary>Declare the acceptance of an invitation.</summary>
          <description>
              The service accepts the invitation, activating the share. It must be accessed
              by the user it was sent to.
          </description>
          <param type="String" required="true" description="The identifier of the invitation - a 20 character unique string">uid</param>
          <param type="boolean" required="true" description="Whether or not this invitation is accepted or not.">accepted</param>
          <returns>
            <format key="invitation">json</format>
          </returns>
      </method>
     </metadata>
   </servlet-mapping>
   
    
   <servlet>
     <servlet-name>ws-list-shares</servlet-name>
     <servlet-class>org.intermine.webservice.server.lists.ListShareServlet</servlet-class>
   </servlet>
   
   <servlet-mapping>
     <servlet-name>ws-list-shares</servlet-name>
     <url-pattern>/service/lists/shares/*</url-pattern>
     <metadata>
       <name>List Sharing</name>
       <minVersion>11</minVersion>
       <method type="POST" authenticationRequired="true">
          <name>Share a List</name>
          <summary>Authorise another user to access a list</summary>
          <description>
            This service provides a means for authorising another user to access a list. To
            share a list the user making the request must be the owner of the list and you must
            know the username of the user you wish to share with. If you do not know the username
            of the user to share with, then the user should issue an invitation instead. The user
            the list is shared with must exist and the list must not already be shared with them.

            The service returns information detailing whom the list in question is currently
            shared with.
          </description>
          <param type="String" required="true" description="The list of yours you wish to share.">list</param>
          <param type="String" required="true" description="The username of the user who will have access.">with</param>
          <param type="boolean" required="false" description="Whether or not to send an email to the user you are sharing with.">notify</param>
          <returns>
            <format accept="application/javascript" key="share">json</format>
          </returns>
      </method>
      <method type="GET" authenticationRequired="true">
          <name>Details of Currently Shared Lists</name>
          <summary>Retrieve information about which lists are shared with and by whom.</summary>
          <description>
            Get information about each list that is shared by or with the authenticating
            user. The service returns a map with two keys "sharedByUser" and "sharedWithUser"
            which are themselves each maps, with list names as keys, and either lists of 
            users with access as values, or the name of the original owner as values.
          </description>
          <returns>
            <format accept="application/javascript" key="share">json</format>
          </returns>
      </method>
       <method type="DELETE" authenticationRequired="true">
          <name>Stop Sharing a List</name>
          <summary>Rescind the Permission Granted to a User to Access a List.</summary>
          <description>
            Stop a user from being able to access a list that you own. This service allows a user
            to remove a user's previously granted permission to view the contents of a list.

            Other than a json results envelope no meaningful results are returned, and the caller
            should simply check for a successful response.
          </description>
          <returns>
            <format accept="application/javascript">json</format>
          </returns>
      </method>
     </metadata>
   </servlet-mapping>
   
    <servlet>
     <servlet-name>ws-user-preferences</servlet-name>
     <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
     <init-param>
        <param-name>GET</param-name>
        <param-value>org.intermine.webservice.server.user.ReadPreferencesService</param-value>
     </init-param>
     <init-param>
        <param-name>POST</param-name>
        <param-value>org.intermine.webservice.server.user.SetPreferencesService</param-value>
     </init-param>
     <init-param>
        <param-name>PUT</param-name>
        <param-value>org.intermine.webservice.server.user.SetPreferencesService</param-value>
     </init-param>
     <init-param>
        <param-name>DELETE</param-name>
        <param-value>org.intermine.webservice.server.user.DeletePreferencesService</param-value>
     </init-param>
   </servlet>
   
   <servlet-mapping>
     <servlet-name>ws-user-preferences</servlet-name>
     <url-pattern>/service/user/preferences/*</url-pattern>
     <metadata>
       <name>User Preferences</name>
       <minVersion>11</minVersion>
       <method type="POST" also="PUT" authenticationRequired="true">
          <name>Set Preference(s)</name>
          <summary>Set the value of one or more preferences</summary>
          <description>
            Thid service allows a user to store or change a key value pair
            associated with their account. The keys may have a particular meaning. All values
            will be stored and retrieved as strings.
          </description>
          <param type="String[]" required="false" description="The preference to set">?</param>
          <returns>
            <format key="preferences">json</format>
          </returns>
      </method>
      <method type="GET" authenticationRequired="true">
          <name>View Preferences</name>
          <summary>Get a user's preferences</summary>
          <description>
            Get a complete listing of a user's preferences. This is presented as a mapping
            from string key to string value.
          </description>
          <returns>
            <format key="preferences">json</format>
          </returns>
      </method>
      <method type="DELETE" authenticationRequired="true">
          <name>Delete Preference(s)</name>
          <summary>Remove one or all preferences.</summary>
          <description>
            Delete either a single preference from a user's set of stored preferences, or deletes
            all stored preference values.
          </description>
          <param type="String" required="false" description="The preference to delete. If not provided, ALL will be cleared">key</param>
          <returns>
            <format key="preferences">json</format>
          </returns>
      </method>
     </metadata>
   </servlet-mapping>

   <!-- NEW IN VERSION 12 -->

   <servlet>
    <servlet-name>ws-query-store</servlet-name>
    <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
    <init-param>
        <param-name>GET</param-name>
        <param-value>org.intermine.webservice.server.query.QueryRetrieverService</param-value>
    </init-param>
    <init-param>
        <param-name>POST</param-name>
        <param-value>org.intermine.webservice.server.query.QueryStoreService</param-value>
    </init-param>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-query-store</servlet-name>
    <url-pattern>/service/queries/*</url-pattern>
    <metadata>
        <name>Query Store</name>
        <minVersion>12</minVersion>
        <method authenticationRequired="false" type="GET" >
            <summary>Get a stored query</summary>
            <description>
                Get a query stored at the service.
            </description>
            <param type="String" required="true" description="The id of the query to fetch">id</param>
            <returns>
                <format>json</format>
                <format>xml</format>
            </returns>
        </method>
        <method authenticationRequired="false" type="POST">
            <summary>Store a query</summary>
            <param type="String" required="true" description="The xml of the query to store.">query</param>
            <returns>
                <format key="id">json</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>
  
  <!-- NEW IN VERSION 13 -->

    <servlet>
	    <servlet-name>ws-sequence</servlet-name>
	    <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
	    <init-param>
	        <param-name>GET</param-name>
	        <param-value>org.intermine.webservice.server.clob.SequenceService</param-value>
	    </init-param>
	    <init-param>
            <param-name>POST</param-name>
            <param-value>org.intermine.webservice.server.clob.SequenceService</param-value>
        </init-param>
	</servlet>
	
	<servlet-mapping>
	   <servlet-name>ws-sequence</servlet-name>
	   <url-pattern>/service/sequence/*</url-pattern>
	   <metadata>
        <name>Sequence Access</name>
        <minVersion>13</minVersion>
        <method authenticationRequired="false" type="GET" also="POST">
            <summary>Get a portion of a sequence-like object.</summary>
            <description format="markdown">
Get either the entire sequence of an object, or
fetch an indexed sub-sequence of it.

This service expects a query with a single output column that resolves
to a sub-sequenceable object. For example to get a sub-sequence
of the genomic sequence of the fly X chromosome in a genomic mine, the following
query could be used:

```
&lt;query model="genomic" view="Chromosome.sequence.residues"&gt;
    &lt;constraint path="Chromosome" op="LOOKUP" value="X" extraValue="D. melanogaster"/&gt;
&lt;/query&gt;
```
            </description>
            <param type="Integer" required="false" default="0" description="The start index">start</param>
            <param type="Integer" required="false" description="The end index">end</param>
            <param type="XML"
                default="
&lt;query model=&quot;genomic&quot; view=&quot;Chromosome.sequence.residues&quot;&gt;
    &lt;constraint path=&quot;Chromosome&quot; op=&quot;LOOKUP&quot; value=&quot;X&quot; extraValue=&quot;D. melanogaster&quot;/&gt;
&lt;/query&gt;"
                required="true" description="The xml of the query to run.">query</param>
            <returns>
                <format key="results">json</format>
            </returns>
        </method>
    </metadata>
	</servlet-mapping>
    
    <!--  New in version 14 -->

    <servlet>
     <servlet-name>ws-jbrowse</servlet-name>
     <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
     <init-param>
        <param-name>GET</param-name>
        <param-value>org.intermine.webservice.server.jbrowse.Endpoint</param-value>
     </init-param>
     <init-param>
        <param-name>POST</param-name>
        <param-value>org.intermine.webservice.server.jbrowse.Endpoint</param-value>
     </init-param>
   </servlet>
   
   <servlet-mapping>
    <servlet-name>ws-jbrowse</servlet-name>
    <url-pattern>/service/jbrowse/*</url-pattern>
    <metadata>
        <name>JBrowse Endpoint</name>
        <minVersion>16</minVersion>
        <method type="GET" authenticationRequired="false" slug="/:domain/features/:refseq">
            <name>Get Features</name>
            <summary>Get Features on a Reference Sequence</summary>
            <description format="markdown">
                This service provides the functionality for `JBrowse` feature
                requests. 

                See [Writing JBrowse Compatible Web Services](http://gmod.org/wiki/JBrowse_Configuration_Guide#Writing_JBrowse-compatible_Web_Services)
            </description>
            <param
                type="String"
                required="true"
                options="/data/Organism|results"
                default="{taxonId}"
                description="The domain we are operating in. This will generally refer to an
                    organism taxon-id">domain</param>
            <param
                type="String"
                required="true"
                options="/data/Chromosome|results{length}"
                default="{primaryIdentifier}"
                description="The identifier of the reference sequence to find
                    features within">refseq</param>
            <param
                type="Integer"
                required="false"
                recommended="true"
                default="100000"
                description="The starting index">start</param>
            <param
                type="Integer"
                required="false"
                recommended="true"
                default="120000"
                description="The end index">end</param>
            <param
                type="String"
                required="false"
                options="/model|model.classes"
                default="{name}"
                description="The type of feature to return">type</param>
            <param
                type="boolean"
                required="false"
                default="false"
                description="Make this a reference sequence request">reference</param>
        <returns>
            <format accept="application/json">json</format>
        </returns>
      </method>
        <method type="GET" authenticationRequired="false" slug="/:domain/stats/global">
            <name>Get Global Statistics</name>
            <summary>Get Statistics about the Features Served by this Store</summary>
            <description format="markdown">
                This service provides the functionality for `JBrowse` global statistics
                requests. 

                See [Writing JBrowse Compatible Web Services](http://gmod.org/wiki/JBrowse_Configuration_Guide#Writing_JBrowse-compatible_Web_Services)
            </description>
            <param
                type="String"
                required="true"
                options="/data/Organism|results"
                default="{taxonId}"
                description="The domain we are operating in. This will generally refer to an
                    organism taxon-id">domain</param>
            <param
                type="String"
                required="false"
                options="/model|model.classes"
                default="{name}"
                description="The type of feature we are interested in">type</param>
        <returns>
            <format accept="application/json">json</format>
        </returns>
      </method>
      <method type="GET" authenticationRequired="false" slug="/:domain/stats/region/:refseq">
            <name>Get Region Statistics</name>
            <summary>Get Statistics for a Sub-Set of Features Served by this Store</summary>
            <description format="markdown">
                This service provides the functionality for `JBrowse` region statistics
                requests. 

                See [Writing JBrowse Compatible Web Services](http://gmod.org/wiki/JBrowse_Configuration_Guide#Writing_JBrowse-compatible_Web_Services)
            </description>
            <param
                type="String"
                required="true"
                options="/data/Organism|results"
                default="{taxonId}"
                description="The domain we are operating in. This will generally refer to an
                    organism taxon-id">domain</param>
            <param
                type="String"
                required="true"
                options="/data/Chromosome|results{length}"
                default="{primaryIdentifier}"
                description="The identifier of the reference sequence to find
                    features within">refseq</param>
            <param
                type="Integer"
                required="false"
                default="1000"
                description="The starting index">start</param>
            <param
                type="Integer"
                required="false"
                default="2000"
                description="The end index">end</param>
            <param
                type="String"
                required="false"
                options="/model|model.classes"
                default="{name}"
                description="The type of feature we are interested in">type</param>
        <returns>
            <format accept="application/json">json</format>
        </returns>
      </method>
      <method type="GET"
              authenticationRequired="false"
              slug="/:domain/stats/regionFeatureDensities/:refseq">
            <name>Get Region Statistics</name>
            <summary>Get Binned Density Statistics for a Sub-Set of Features Served by this Store</summary>
            <description format="markdown">
                This service provides the functionality for `JBrowse` binned
                region statistics requests. 

                See [Writing JBrowse Compatible Web Services](http://gmod.org/wiki/JBrowse_Configuration_Guide#Writing_JBrowse-compatible_Web_Services)
            </description>
            <param
                type="String"
                required="true"
                options="/data/Organism|results"
                default="{taxonId}"
                description="The domain we are operating in. This will generally refer to an
                    organism taxon-id">domain</param>
            <param
                type="String"
                required="true"
                options="/data/Chromosome|results{length}"
                default="{primaryIdentifier}"
                description="The identifier of the reference sequence to find
                    features within">refseq</param>
            <param
                type="Integer"
                required="false"
                default="1000"
                description="The starting index">start</param>
            <param
                type="Integer"
                required="false"
                default="2000"
                description="The end index">end</param>
            <param
                type="String"
                required="false"
                options="/model|model.classes"
                default="{name}"
                description="The type of feature we are interested in">type</param>
            <param
                type="String"
                required="false"
                description="The number of bases per bin, used to determine the number of bins"
                default="20000">basesPerBin</param>
        <returns>
            <format accept="application/json">json</format>
        </returns>
      </method>
    </metadata>
   </servlet-mapping>
   
   <!--  New in version 16 -->

    <servlet>
     <servlet-name>ws-jbrowse-names</servlet-name>
     <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
     <init-param>
        <param-name>GET</param-name>
        <param-value>org.intermine.webservice.server.jbrowse.Names</param-value>
     </init-param>
   </servlet>
   
   <servlet-mapping>
    <servlet-name>ws-jbrowse-names</servlet-name>
    <url-pattern>/service/jbrowse/names/*</url-pattern>
    <metadata>
        <name>JBrowse Name Lookup</name>
        <minVersion>16</minVersion>
        <method type="GET" authenticationRequired="false" slug="/:domain">
            <name>Find Features By Name</name>
            <summary>Lookup features by name</summary>
            <description format="markdown">
                This service provides the functionality for `JBrowse` name
                look-up requests.

                See [Writing JBrowse Compatible Web Services](http://gmod.org/wiki/JBrowse_Configuration_Guide#Writing_JBrowse-compatible_Web_Services)
            </description>
            <param
                required="true"
                type="String"
                default="eve"
                description="The search prefix string to look for">startswith</param>
            <param
                required="true"
                type="String"
                options="/data/Organism|results"
                default="{taxonId}"
                description="The domain for this search (generally an organism)">domain</param>
            <returns>
                <format accept="application/json">json</format>
            </returns>
        </method>
        <method type="GET" authenticationRequired="false" slug="/:domain">
            <name>Retrieve Feature Information</name>
            <summary>Retrieve feature information by name</summary>
            <description format="markdown">
                This service provides the functionality for `JBrowse` name
                look-up requests.

                See [Writing JBrowse Compatible Web Services](http://gmod.org/wiki/JBrowse_Configuration_Guide#Writing_JBrowse-compatible_Web_Services)
            </description>
            <param
                required="true"
                type="String"
                default="eve"
                description="The name of the item.">equals</param>
            <param
                required="true"
                type="String"
                options="/data/Organism|results"
                default="{taxonId}"
                description="The domain for this search (generally an organism)">domain</param>
            <returns>
                <format accept="application/json">json</format>
            </returns>
        </method>
    </metadata>
   </servlet-mapping>
   
   <servlet>
     <servlet-name>ws-deregistration-token</servlet-name>
     <servlet-class>org.intermine.webservice.server.user.DeregistrationTokenServlet</servlet-class>
   </servlet>
   
   <servlet-mapping>
    <servlet-name>ws-deregistration-token</servlet-name>
    <url-pattern>/service/user/deregistration/*</url-pattern>
    <metadata>
        <name>Deregistration Tokens</name>
        <minVersion>16</minVersion>
        <method type="GET" authenticationRequired="true" slug="/:uid">
            <summary>Get information about a deregistration token</summary>
            <description>
                This service returns a representation of a deregistration
                token that a user has access to.
            </description>
            <param
                required="true"
                type="String"
                description="The identifier of the token">uid</param>
            <returns>
                <format accept="application/json" key="token">json</format>
            </returns>
        </method>
        <method type="POST" authenticationRequired="true">
            <summary>Create a deregistration token</summary>
            <description>
                This service creates a deregistration token,
                thus starting the process of de-registerin a user.
            </description>
            <returns>
                <format accept="application/json" key="token">json</format>
            </returns>
        </method>
        <method type="DELETE" authenticationRequired="true" slug="/:uid">
            <summary>Delete a deregistration token</summary>
            <description>
                This service deletes a deregistration
                token that a user has access to, thus cancelling
                the request to de-register the user.
            </description>
            <param
                required="true"
                type="String"
                description="The identifier of the token">uid</param>
            <returns>
                <format accept="application/json" key="token">json</format>
            </returns>
        </method>
    </metadata>
   </servlet-mapping>

   <servlet>
     <servlet-name>ws-user</servlet-name>
     <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
     <init-param>
         <param-name>GET</param-name>
         <param-value>org.intermine.webservice.server.user.WhoAmIService</param-value>
     </init-param>
     <init-param>
         <param-name>DELETE</param-name>
         <param-value>org.intermine.webservice.server.user.DeregistrationService</param-value>
     </init-param>
   </servlet>
   
   <servlet-mapping>
     <servlet-name>ws-user</servlet-name>
     <url-pattern>/service/user</url-pattern>
     <metadata>
         <name>User</name>
         <minVersion>16</minVersion>
         <method type="GET" authenticationRequired="true">
             <summary>Get information about the Current User</summary>
             <description format="markdown">
                 This service provides information about the current user,
                 including their user name and preferences.
             </description>
             <returns>
                <format key="user" accept="application/json">json</format>
            </returns>
        </method>
         <method type="DELETE" authenticationRequired="true">
             <summary>Delete the Current User</summary>
             <description format="markdown">
                 This service deletes the current User and all their data.
                 
                 To ensure that you really mean to deregister a user
                 programmatically, this service requires a deregistration
                 token to be obtained before sending the delete request.

                 As output it returns all of the user data it had before it was
                 deleted.
             </description>
             <param
                 required="true"
                 description="A token to ensure this is not a mistake"
                 type="String">deregistrationToken</param>
             <returns>
                <format accept="application/xml">xml</format>
            </returns>
        </method>
    </metadata>
   </servlet-mapping>

   <servlet>
     <servlet-name>ws-perma-tokens</servlet-name>
     <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
     <init-param>
         <param-name>GET</param-name>
         <param-value>org.intermine.webservice.server.user.TokensService</param-value>
     </init-param>
     <init-param>
         <param-name>POST</param-name>
         <param-value>org.intermine.webservice.server.user.TokenService</param-value>
     </init-param>
     <init-param>
         <param-name>DELETE</param-name>
         <param-value>org.intermine.webservice.server.user.DeleteTokensService</param-value>
     </init-param>
   </servlet>
   
   <servlet-mapping>
     <servlet-name>ws-perma-tokens</servlet-name>
     <url-pattern>/service/user/tokens</url-pattern>
     <metadata>
         <name>Tokens</name>
         <minVersion>16</minVersion>
         <method type="GET" authenticationRequired="true">
             <summary>Get List of Permanent Tokens</summary>
             <description format="markdown">
                 Tokens are issued so that users may provide access
                 to their private data to third parties in a more secure manner.
                 This service lets users inspect the permanent tokens they have
                 issued.
                 
                 No access is provide here to other tokens (24hrs, api, day), for
                 security and other reasons. Please look at the `Session` service
                 for issuing new temporary tokens.
             </description>
             <returns>
                <format key="tokens" accept="application/json">json</format>
            </returns>
        </method>
         <method type="POST" authenticationRequired="true">
             <summary>Create a New Token</summary>
             <description format="markdown">
Tokens are issued so that users may provide access
to their private data to third parties in a more secure manner.
This service lets users create a new token they can provide
to others.

The different token types are:

`day`
 : A token that will be valid for up to 24 hrs.
`once`
 : A token that can only be used for a single request.
`api`
 : The main Read-Write API key of the user. Generating one of these replaces the currrent key.
`perm`
 : A permanent Read-Only token that others can use.
             </description>
             <param
                 required="false"
                 type="enumerated"
                 values="day,once,api,perm"
                 default="day"
                 description="The type of token to issue">type</param>
             <param
                 required="false"
                 type="String"
                 description="An optional message to associate with a token">message</param>
             <returns>
                <format key="token" accept="application/json">json</format>
            </returns>
        </method>
         <method type="DELETE" authenticationRequired="true">
             <summary>Delete all Tokens</summary>
             <description format="markdown">
                 Delete all permanent tokens.

                 Permanent tokens are issued so that users may provide access
                 to their private data to third parties in a more secure manner.
                 This service lets users all the delete permanent tokens they have
                 issued.
             </description>
             <returns>
                <format accept="application/json">json</format>
            </returns>
        </method>
    </metadata>
   </servlet-mapping>
   
   <servlet>
     <servlet-name>ws-perma-token</servlet-name>
     <servlet-class>org.intermine.webservice.server.user.PermaTokensServlet</servlet-class>
   </servlet>
   
   <servlet-mapping>
     <servlet-name>ws-perma-token</servlet-name>
     <url-pattern>/service/user/tokens/*</url-pattern>
     <metadata>
         <name>Permanent Token</name>
         <minVersion>16</minVersion>
         <method type="GET" authenticationRequired="true" slug="/:uid">
             <summary>Get Token Information</summary>
             <description format="markdown">
                 Retrieve information about a specific permanent token.

                 Permanent tokens are issued so that users may provide access
                 to their private data to third parties in a more secure manner.
                 This service lets users inspect a specific permanent tokens they have
                 issued.
             </description>
             <param
                 required="true"
                 type="String"
                 description="The identifier of one of your tokens">uid</param>
             <returns>
                <format accept="application/json">json</format>
            </returns>
        </method>
         <method type="DELETE" authenticationRequired="true" slug="/:uid">
             <summary>Delete a Token</summary>
             <description format="markdown">
                 Delete a specific permanent token.

                 Permanent tokens are issued so that users may provide access
                 to their private data to third parties in a more secure manner.
                 This service lets users delete permanent tokens they have
                 issued.
             </description>
             <param
                 required="true"
                 type="String"
                 description="The identifier of one of your tokens">uid</param>
             <returns>
                <format accept="application/json">json</format>
            </returns>
        </method>
    </metadata>
   </servlet-mapping>

  <servlet>
    <servlet-name>ws-branding</servlet-name>
    <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
    <init-param>
         <param-name>GET</param-name>
         <param-value>org.intermine.webservice.server.branding.BrandingService</param-value>
     </init-param>
  </servlet>

  <servlet-mapping>
     <servlet-name>ws-branding</servlet-name>
     <url-pattern>/service/branding</url-pattern>
     <metadata>
         <name>Branding</name>
         <minVersion>16</minVersion>
         <method type="GET" authenticationRequired="false">
             <summary>Get Branding Information</summary>
             <description>
                 Retrieve branding information, so that elements may be
                 visually styled appropriately for their source.
             </description>
             <returns>
                <format accept="application/json">json</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-saved-queries</servlet-name>
    <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
    <init-param>
         <param-name>GET</param-name>
         <param-value>org.intermine.webservice.server.query.SavedQueryRetrievalService</param-value>
     </init-param>
     <init-param>
         <param-name>POST</param-name>
         <param-value>org.intermine.webservice.server.query.QueryUploadService</param-value>
     </init-param>
     <init-param>
         <param-name>PUT</param-name>
         <param-value>org.intermine.webservice.server.query.QueryUpdateService</param-value>
     </init-param>
     <init-param>
         <param-name>DELETE</param-name>
         <param-value>org.intermine.webservice.server.query.QueryRemovalService</param-value>
     </init-param>
  </servlet>

  <servlet-mapping>
     <servlet-name>ws-saved-queries</servlet-name>
     <url-pattern>/service/user/queries</url-pattern>
     <metadata>
         <name>Saved Queries</name>
         <minVersion>16</minVersion>
         <method authenticationRequired="false" type="GET">
            <summary>Get the Saved Queries You have Access to.</summary>
            <description>
                This resource represents access to the set of saved-queries
                accessible to a user. Saved queries are just normal queries, but
                persisted with the user's account.
            </description>
            <param required="false"
                type="String"
                description="An optional filter by name, allowing wildcards.">filter</param>
            <returns>
                <format accept="application/json">json</format>
                <format accept="application/xml">xml</format>
            </returns>
         </method>
         <method authenticationRequired="true" type="POST">
            <summary>Upload New Queries to be Saved into a User's Profile</summary>
            <description>
                This resource allows users to upload queries to be saved into their profile.
                Queries that the user uploads should all be valid, and ideally have names. If they
                do not have names, names will be assigned to them.
            </description>
            <param required="false" type="XML" default="" description="The queries to upload, if using form parameters.">xml</param>
            <body description="The queries to upload. If using body content.">
             <content type="application/xml">
                &lt;query model="genomic" view="Gene.symbol Gene.proteins.proteinDomains.name"&gt;
                    &lt;constraint path="Gene" op="LOOKUP" value="eve"/&gt;
                &lt;/query&gt;
             </content>
             <content type="none"/>
            </body>
            <returns>
                <format accept="text/plain">text</format>
                <format accept="application/json">json</format>
                <format accept="application/xml">xml</format>
                <format accept="text/tab-separated-values">tab</format>
                <format accept="text/comma-separated-values">csv</format>
            </returns>
         </method>
         <method authenticationRequired="true" type="PUT">
            <summary>Update Existing Queries in a User's Profile</summary>
            <description>
                This resource allows users to upload queries to be saved into their profile.
                Queries that the user uploads should all be valid, and ideally have names. If they
                do not have names, names will be assigned to them. If queries with the same name
                already exist, they will be over-written. This provides a mechanism for updating
                the value of saved queries on a service.
            </description>
            <param required="false" type="XML" default="" description="The queries to upload, if using form parameters.">xml</param>
            <body description="The queries to upload. If using body content.">
             <content type="application/xml">
                &lt;query model="genomic" view="Gene.symbol Gene.proteins.proteinDomains.name"&gt;
                    &lt;constraint path="Gene" op="LOOKUP" value="eve"/&gt;
                &lt;/query&gt;
             </content>
             <content type="none"/>
            </body>
            <returns>
                <format accept="text/plain">text</format>
                <format accept="application/json">json</format>
                <format accept="application/xml">xml</format>
                <format accept="text/tab-separated-values">tab</format>
                <format accept="text/comma-separated-values">csv</format>
            </returns>
         </method>
         <method authenticationRequired="true" type="DELETE">
            <summary>Delete a saved query by name</summary>
            <description format="markdown">
                This resource exposes the ability to delete specific saved queries, identified
                by name.

                A user can only delete queries that they own, and must be executed
                with `Read/Write` permission.
            </description>
            <param required="true"
                options="/user/queries|queries"
                default="{title}"
                type="String"
                description="The name of the query to delete">name</param>
            <returns>
                <format accept="application/json">json</format>
                <format accept="application/xml">xml</format>
            </returns>
         </method>
     </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-saved-query</servlet-name>
    <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
     <init-param>
         <param-name>DELETE</param-name>
         <param-value>org.intermine.webservice.server.query.QueryRemovalService</param-value>
     </init-param>
  </servlet>

  <servlet-mapping>
     <servlet-name>ws-saved-query</servlet-name>
     <url-pattern>/service/user/queries/*</url-pattern>
     <metadata>
         <name>Saved Query</name>
         <minVersion>16</minVersion>

         <method authenticationRequired="true" type="DELETE" slug="/:name">
            <summary>Delete a saved query by name</summary>
            <description format="markdown">
                This resource exposes the ability to delete specific saved queries, identified
                by name.

                A user can only delete queries that they own, and must be executed
                with `Read/Write` permission.
            </description>
            <param required="true"
                options="/user/queries|queries"
                default="{title}"
                type="String"
                description="The name of the query to delete">name</param>
            <returns>
                <format accept="application/json">json</format>
                <format accept="application/xml">xml</format>
            </returns>
         </method>
     </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-saved-template</servlet-name>
    <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
    <init-param>
         <param-name>GET</param-name>
         <param-value>org.intermine.webservice.server.template.SingleTemplateService</param-value>
     </init-param>
     <init-param>
         <param-name>DELETE</param-name>
         <param-value>org.intermine.webservice.server.template.TemplateRemovalService</param-value>
     </init-param>
  </servlet>
  
  <servlet-mapping>
     <servlet-name>ws-saved-template</servlet-name>
     <url-pattern>/service/templates/*</url-pattern>
     <metadata>
         <name>Saved Template</name>
         <minVersion>16</minVersion>
         <method authenticationRequired="false" type="GET" slug="/:name">
            <summary>Retrieve a template by name</summary>
            <description format="markdown">
                This resource retrieves a representation of a named template, returning
                404 if the template cannot be found.

                If the request is authenticated, then the templates visible to that user (created by
                or shared with them) will be included along with publically accessible templates.
            </description>
            <param required="true"
                options="/templates|templates"
                default="{name}"
                type="String"
                description="The name of the template to fetch">name</param>
            <returns>
                <format accept="application/json">json</format>
                <format accept="application/xml">xml</format>
            </returns>
         </method>
         <method authenticationRequired="true" type="DELETE" slug="/:name">
            <summary>Delete a template by name</summary>
            <description format="markdown">
                This resource exposes the ability to delete specific templates, identified
                by name.

                A user can only delete templates that they own, and must be executed
                with `Read/Write` permission.
            </description>
            <param required="true"
                options="/templates|templates"
                default="{name}"
                type="String"
                description="The name of the template to delete">name</param>
            <returns>
                <format accept="application/json">json</format>
                <format accept="application/xml">xml</format>
            </returns>
         </method>
     </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-session</servlet-name>
    <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
    <init-param>
         <param-name>GET</param-name>
         <param-value>org.intermine.webservice.server.SessionService</param-value>
     </init-param>
  </servlet>

  <servlet-mapping>
     <servlet-name>ws-session</servlet-name>
     <url-pattern>/service/session</url-pattern>
     <metadata>
         <name>Sessions</name>
         <minVersion>16</minVersion>
         <method authenticationRequired="false" type="GET">
            <summary>Open a new Web-Services Session</summary>
            <description format="markdown">
                This service opens a new 24 session for users. If authenticated to
                an existing user, it has the same effect as requesting a new 24hr
                token. But for unauthenticated users, it allocates a new temporary
                profile, and assigns a 24hr usage token.
            </description>
            <returns>
                <format key="token">json</format>
            </returns>
         </method>
     </metadata>
  </servlet-mapping>

  <servlet>
      <servlet-name>ws-data</servlet-name>
      <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
      <init-param>
          <param-name>GET</param-name>
          <param-value>org.intermine.webservice.server.data.DataService</param-value>
      </init-param>
  </servlet>

  <servlet-mapping>
      <servlet-name>ws-data</servlet-name>
      <url-pattern>/service/data/*</url-pattern>
      <metadata>
          <name>Simple Data Service</name>
          <minVersion>16</minVersion>
          <method type="GET" authenticationRequired="false" slug="/:type">
              <summary>Get Data about Objects of the Given Type</summary>
              <description>
                  This service allows simple access to queries against a
                  single type. This is meant to allow for simple linking
                  and resource-based access to InterMine data.
              </description>
              <header
                  required="false"
                  default="records=0-10"
                  description="The range of values requested">Range</header>
              <param
                  required="true"
                  options="/model|model.classes"
                  default="{name}"
                  type="String"
                  description="The type of the object to find.">type</param>
              <param
                  required="false"
                  type="String[]"
                  description="An optional filter over the objects"
                  repeat="/model|model.classes.$type.attributes">?</param>
              <returns>
                  <format accept="application/json" key="results">json</format>
              </returns>
          </method>
      </metadata>
  </servlet-mapping>

  <!-- New in version 17 -->

    <servlet>
     <servlet-name>ws-jbrowse-config</servlet-name>
     <servlet-class>org.intermine.webservice.server.core.RestfulServlet</servlet-class>
     <init-param>
        <param-name>GET</param-name>
        <param-value>org.intermine.webservice.server.jbrowse.Config</param-value>
     </init-param>
   </servlet>

   <servlet-mapping>
    <servlet-name>ws-jbrowse-config</servlet-name>
    <url-pattern>/service/jbrowse/config/*</url-pattern>
    <metadata>
        <name>JBrowse Configuration Files</name>
        <minVersion>17</minVersion>
        <method type="GET" authenticationRequired="false" slug="/:domain/trackList.json">
            <name>Get Track Listing</name>
            <summary>Get the Configuration for the Track Listing</summary>
            <description format="markdown">
                This service serves a `trackList.json` file suitable for
                use with JBrowse.

                See [Writing JBrowse Compatible Web Services](http://gmod.org/wiki/JBrowse_Configuration_Guide#Writing_JBrowse-compatible_Web_Services)
            </description>
            <param
                type="String"
                required="true"
                options="/data/Organism|results"
                default="{taxonId}"
                description="The domain we are operating in. This will generally refer to an
                    organism taxon-id">domain</param>
            <returns>
                <format accept="application/json">json</format>
            </returns>
        </method>
        <method type="GET" authenticationRequired="false" slug="/:domain/seq/refSeqs.json">
            <name>Get Reference Sequence List</name>
            <summary>Get the Configuration for the Reference Sequences</summary>
            <description format="markdown">
                This service serves a `refSeqs.json` file suitable for
                use with JBrowse.

                See [Writing JBrowse Compatible Web Services](http://gmod.org/wiki/JBrowse_Configuration_Guide#Writing_JBrowse-compatible_Web_Services)
            </description>
            <param
                type="String"
                required="true"
                options="/data/Organism|results"
                default="{taxonId}"
                description="The domain we are operating in. This will generally refer to an
                    organism taxon-id">domain</param>
            <returns>
                <format accept="application/json">json</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <!-- MUST BE LISTED LAST OF ALL WEBSERVICES AS IT IS THE MOST GENERAL -->
  <servlet-mapping>
    <servlet-name>ws-service-listing</servlet-name>
    <url-pattern>/service</url-pattern>
    <metadata>
      <name>Service Listing</name>
      <method type="GET" authenticationRequired="false">
        <summary>Get a description of the services offered by this data-warehouse.</summary>
        <description format="markdown">
            This service returns a description of all the endpoints of the
            web services provided by this application. It includes a listing
            of all the calls that can be made, along with information about
            request parameters and output formats. This information is used
            to provide the listings rendered by [iodocs](http://iodocs.intermine.org).
        </description>
        <returns>
          <format accept="application/json">json</format>
        </returns>
      </method>
    </metadata>
  </servlet-mapping>
<!-- ================================================================================= -->

  <session-config>
    <session-timeout>1440</session-timeout>      <!-- 1440 = 24 * 60 = 1 day -->
  </session-config>

  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <!-- Interpret POST parameters as UTF-8 by default -->
  <filter>
      <filter-name>UseUTF8</filter-name>
      <filter-class>org.intermine.web.filters.SetCharacterEncodingFilter</filter-class>
      <init-param>
          <param-name>encoding</param-name>
          <param-value>UTF-8</param-value>
      </init-param>
      <init-param>
          <param-name>ignore</param-name>
          <param-value>false</param-value>
      </init-param>
  </filter>

  <filter-mapping>
      <filter-name>UseUTF8</filter-name>
      <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter>
      <filter-name>SessionlessRequests</filter-name>
      <filter-class>org.intermine.webservice.server.filter.RequestSubClassFilter</filter-class>
  </filter>

  <filter-mapping>
      <filter-name>SessionlessRequests</filter-name>
      <url-pattern>/service/*</url-pattern>
  </filter-mapping>

  <filter>
  <filter-name>AllowCORSWebServiceRequests</filter-name>
  <filter-class>org.intermine.web.filters.HeaderFilter</filter-class>
      <init-param>
        <param-name>Access-Control-Allow-Origin</param-name>
        <param-value>*</param-value>
      </init-param>
      <init-param>
        <param-name>Access-Control-Allow-Headers</param-name>
        <param-value>Origin, X-Requested-With, Content-Type, Accept, Range, Authorization, Content-Length, Content-Range</param-value>
    </init-param>
      <init-param>
        <param-name>Access-Control-Expose-Headers</param-name>
        <param-value>Content-Encoding, Content-Type, Content-Length, Content-Range</param-value>
    </init-param>
    <init-param>
        <param-name>Access-Control-Allow-Methods</param-name>
        <param-value>DELETE, POST, GET, OPTIONS, PUT</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>AllowCORSWebServiceRequests</filter-name>
    <url-pattern>/service/*</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>DontCache</filter-name>
    <filter-class>org.intermine.web.filters.HeaderFilter</filter-class>
    <init-param>
      <param-name>Cache-Control</param-name>
    <param-value>no-cache,no-store,max-age=0</param-value>
    </init-param>
    <init-param>
      <param-name>Expires</param-name>
      <param-value>0</param-value>
    </init-param>

  </filter>

  <filter-mapping>
    <filter-name>DontCache</filter-name>
    <url-pattern>/query.do</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>ExpireHeader</filter-name>
    <filter-class>org.intermine.web.filters.ExpiresHeaderFilter</filter-class>
  </filter>

  <filter-mapping>
    <filter-name>ExpireHeader</filter-name>
    <url-pattern>*.js</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>ExpireHeader</filter-name>
    <url-pattern>*.css</url-pattern>
  </filter-mapping>
  
  <!-- The cachable WS responses are configured here. -->
  <filter>
  	<filter-name>ReleaseEtags</filter-name>
  	<filter-class>org.intermine.web.filters.ReleaseEtagFilter</filter-class>
  </filter>
  
  <filter-mapping>
  	<filter-name>ReleaseEtags</filter-name>
  	<servlet-name>ws-model</servlet-name>
  </filter-mapping>

  <filter-mapping>
  	<filter-name>ReleaseEtags</filter-name>
  	<servlet-name>ws-summary-fields</servlet-name>
  </filter-mapping>

  <filter-mapping>
  	<filter-name>ReleaseEtags</filter-name>
  	<servlet-name>ws-classkeys</servlet-name>
  </filter-mapping>

  <filter-mapping>
  	<filter-name>ReleaseEtags</filter-name>
  	<servlet-name>ws-code-gen</servlet-name>
  </filter-mapping>

  <filter-mapping>
  	<filter-name>ReleaseEtags</filter-name>
  	<servlet-name>ws-service-listing</servlet-name>
  </filter-mapping>

  <filter-mapping> <!-- Does not include user data, and over read-only db -->
  	<filter-name>ReleaseEtags</filter-name>
  	<servlet-name>ws-quick-search</servlet-name>
  </filter-mapping>

  <filter-mapping> <!-- NB: if we ever make widgets dynamic, this will have to change. -->
  	<filter-name>ReleaseEtags</filter-name>
  	<servlet-name>ws-available-widgets</servlet-name>
  </filter-mapping>
  
 <filter>
  <filter-name>CompressingFilter</filter-name>
  <filter-class>com.planetj.servlet.filter.compression.CompressingFilter</filter-class>
 </filter>

 <filter-mapping>
  <filter-name>CompressingFilter</filter-name>
  <url-pattern>/*</url-pattern>
 </filter-mapping>

  <error-page>
    <error-code>500</error-code>
    <location>/static/flymine-offline/</location>
  </error-page>
  <error-page>
    <error-code>502</error-code>
    <location>/static/flymine-offline/</location>
  </error-page>
  <error-page>
    <error-code>503</error-code>
    <location>/static/flymine-offline/</location>
  </error-page>
  <error-page>
    <error-code>404</error-code>
    <location>/pagenotfound.do</location>
  </error-page>

  <jsp-config>
    <jsp-property-group>
      <url-pattern>*.jsp</url-pattern>
      <trim-directive-whitespaces>true</trim-directive-whitespaces>
    </jsp-property-group>
  </jsp-config>

</web-app>
