<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd" version="2.4">

  <context-param>
    <param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name>
    <param-value>InterMineWebApp</param-value>
  </context-param>

  <listener>
    <listener-class>org.intermine.web.logic.session.SessionListener</listener-class>
  </listener>

<!-- Main webapp mapping -->
<!-- ================================================================================ -->
  <servlet>
    <servlet-name>action</servlet-name>
    <servlet-class>org.apache.struts.action.ActionServlet</servlet-class>
    <init-param>
      <param-name>config</param-name>
      <param-value>/WEB-INF/struts-config.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>action</servlet-name>
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>
<!-- ================================================================================= -->

<!-- DWR mapping -->
<!-- ================================================================================= -->

  <servlet>
  <servlet-name>dwr-invoker</servlet-name>
  <servlet-class>org.directwebremoting.servlet.DwrServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
    <init-param>
      <param-name>activeReverseAjaxEnabled</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>allowGetForSafariButMakeForgeryEasier</param-name>
      <param-value>true</param-value>
    </init-param>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <servlet-mapping>
  <servlet-name>dwr-invoker</servlet-name>
  <url-pattern>/dwr/*</url-pattern>
  </servlet-mapping>


<!-- ================================================================================= -->
<!-- OpenID Authenticator -->
<!-- ================================================================================= -->

  <servlet>
  <servlet-name>openid-auth</servlet-name>
  <servlet-class>org.intermine.web.logic.login.OpenIDAuthenticator</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>openid-auth</servlet-name>
  <url-pattern>/openid</url-pattern>
  </servlet-mapping>

<!-- ================================================================================= -->
<!-- Intermine Web Service mapping -->
<!-- ================================================================================= -->


  <!--@MODEL_INCLUDE@-->

  
  <servlet>
  <servlet-name>ws-query-results</servlet-name>
  <servlet-class>org.intermine.webservice.server.query.result.QueryResultServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-query-results</servlet-name>
  <url-pattern>/service/query/results/*</url-pattern>
  <metadata>
    <name>Query Results</name>
    <method type="POST" authenticationRequired="false" ALSO="GET">
        <summary>Get results for a query against the database.</summary>
        <description>
            This service provides full access to arbitrary database queries.
            Queries are accepted in a serialised XML format, executed and returned
            in a streaming manner. The query format is a custom subset of the capabilities
            of SQL; see the InterMine wiki for a full description of the query XML
            syntax.
        </description>
        <param required="true" type="XML" description="A definition of the query to execute in Path-Query XML format">query</param>
        <param type="Integer" required="false" default="0" description="The index of the first result to return.">start</param>
        <param type="Integer" required="false" default="10" description="The maximum size of the result set.">size</param>
        <returns>
            <format>tab</format>
            <format>csv</format>
            <format key="results">json</format>
            <format>xml</format>
        </returns>
    </method>
  </metadata>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-query-to-list</servlet-name>
  <servlet-class>org.intermine.webservice.server.query.QueryToListServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-query-to-list</servlet-name>
  <url-pattern>/service/query/tolist/*</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-query-append</servlet-name>
  <servlet-class>org.intermine.webservice.server.query.QueryListAppendServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-query-append</servlet-name>
  <url-pattern>/service/query/append/tolist/*</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-query-upload</servlet-name>
  <servlet-class>org.intermine.webservice.server.query.QueryUploadServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-query-upload</servlet-name>
  <url-pattern>/service/query/upload</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-lists</servlet-name>
  <servlet-class>org.intermine.webservice.server.lists.ListsServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-lists</servlet-name>
  <url-pattern>/service/listswithobject/*</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-list-append</servlet-name>
  <servlet-class>org.intermine.webservice.server.lists.ListAppendServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-list-append</servlet-name>
  <url-pattern>/service/lists/append/*</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-list-union</servlet-name>
  <servlet-class>org.intermine.webservice.server.lists.ListUnionServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-list-union</servlet-name>
  <url-pattern>/service/lists/union/*</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-list-subtract</servlet-name>
  <servlet-class>org.intermine.webservice.server.lists.ListSubtractionServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-list-subtract</servlet-name>
  <url-pattern>/service/lists/subtract/*</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-list-intersect</servlet-name>
  <servlet-class>org.intermine.webservice.server.lists.ListIntersectionServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-list-intersect</servlet-name>
  <url-pattern>/service/lists/intersect/*</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-list-diff</servlet-name>
  <servlet-class>org.intermine.webservice.server.lists.ListDifferenceServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-list-diff</servlet-name>
  <url-pattern>/service/lists/diff/*</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-available-lists</servlet-name>
  <servlet-class>org.intermine.webservice.server.lists.AvailableListsServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-available-lists</servlet-name>
  <url-pattern>/service/lists/*</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-rename-list</servlet-name>
  <servlet-class>org.intermine.webservice.server.lists.ListRenameServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-rename-list</servlet-name>
  <url-pattern>/service/lists/rename/*</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-template-upload</servlet-name>
  <servlet-class>org.intermine.webservice.server.template.TemplateUploadServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-template-upload</servlet-name>
  <url-pattern>/service/template/upload</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-template-results</servlet-name>
  <servlet-class>org.intermine.webservice.server.template.result.TemplateResultServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-template-results</servlet-name>
  <url-pattern>/service/template/results</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-template-to-list</servlet-name>
  <servlet-class>org.intermine.webservice.server.template.TemplateToListServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-template-to-list</servlet-name>
  <url-pattern>/service/template/tolist/*</url-pattern>
  </servlet-mapping>

  <servlet>
  <servlet-name>ws-template-append</servlet-name>
  <servlet-class>org.intermine.webservice.server.template.TemplateListAppendServlet</servlet-class>
  <init-param>
     <param-name>debug</param-name>
     <param-value>true</param-value>
  </init-param>
  </servlet>

  <servlet-mapping>
  <servlet-name>ws-template-append</servlet-name>
  <url-pattern>/service/template/append/tolist/*</url-pattern>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-template</servlet-name>
    <servlet-class>org.intermine.webservice.server.template.AvailableTemplatesServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-template</servlet-name>
    <url-pattern>/service/templates/*</url-pattern>
    <metadata>
        <name>Templates</name>
        <method type="GET" authenticationRequired="false">
            <summary>Get the list of available templates.</summary>
            <description>
                Get a listing of the templates configured in an InterMine instance.
                Each template contains a description of its properties, defining the
                parameters that must be provided to run it, as well as a definition of the
                output format for its results.
                If the request is authenticated to a user, then the templates that that has access
                to will also be returned.
            </description>
            <param required="false" default="false" description="Whether or not to include invalid templates. Invalid templates cannot be run.">includeBroken</param>
            <returns>
                <format>xml</format>
                <format key="templates">json</format>
                <format>tab</format>
                <format>csv</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-model</servlet-name>
    <servlet-class>org.intermine.webservice.server.model.ModelServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-model</servlet-name>
    <url-pattern>/service/model/*</url-pattern>
    <metadata>
        <name>Data Model</name>
        <method type="GET" authenticationRequired="false">
            <summary>Get a description of the data model</summary>
            <description>
                An InterMine data model can be fully described as a set of classes
                with various properties. This data model is useful for constructing
                queries and interpreting the results returned from the service.
            </description>
            <returns>
                <format>xml</format>
                <format key="model">json</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-version</servlet-name>
    <servlet-class>org.intermine.webservice.server.VersionServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-version</servlet-name>
    <url-pattern>/service/version/*</url-pattern>
    <metadata>
        <name>Web-Service Version</name>
        <method type="GET" authenticationRequired="false">
           <summary>Get the Web-Service Version.</summary>
           <description>
               Get the web-service version number. This number is incremented for
               each change in functionality.
           </description>
           <returns>
             <format>text</format>
             <format key="version">json</format>
           </returns>
       </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-check-resource</servlet-name>
    <servlet-class>org.intermine.webservice.server.AvailableServicesServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-check-resource</servlet-name>
    <url-pattern>/service/check/*</url-pattern>
    
  </servlet-mapping>

  <!-- NEW IN VERSION 6 -->

  <servlet>
    <servlet-name>ws-possible-values</servlet-name>
    <servlet-class>org.intermine.webservice.server.path.PossibleValuesServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-possible-values</servlet-name>
    <url-pattern>/service/path/values</url-pattern>
    <metadata>
        <name>Possible Values</name>
        <minVersion>6</minVersion>
        <method type="GET" authenticationRequired="false" ALSO="POST">
           <summary>Get the possible values a path may have.</summary>
           <description>
               This service provides the possible values that a path may represent
               in the database. This functionality is expected to primarily useful for
               applications providing completion and suggestions for user-input.
           </description>
           <param type="String" required="true" description="The path whose possible values are requested">path</param>
           <param type="JSON {string -> string}" required="false" description="Any type constraints on this path">typeConstraints</param>
           <returns>
             <format key="results">json</format>
             <format key="results">count</format>
           </returns>
       </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-schemata</servlet-name>
    <servlet-class>org.intermine.webservice.server.SchemaServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-schemata</servlet-name>
    <url-pattern>/service/schema/*</url-pattern>
  </servlet-mapping>

  <!-- NEW IN VERSION 7 -->

  <servlet>
    <servlet-name>ws-summary-fields</servlet-name>
    <servlet-class>org.intermine.webservice.server.SummaryServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-summary-fields</servlet-name>
    <url-pattern>/service/summaryfields</url-pattern>
    <metadata>
        <name>Summary Fields</name>
        <minVersion>7</minVersion>
        <method type="GET" authenticationRequired="false">
           <summary>Get the fields used to summarise the class</summary>
           <param type="Boolean" required="false" default="false" description="Whether to exclude references from the summary fields">norefs</param>
	       <returns>
	         <format key="classes">json</format>
	       </returns>
       </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-code-gen</servlet-name>
    <servlet-class>org.intermine.webservice.server.query.CodeServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-code-gen</servlet-name>
    <url-pattern>/service/query/code</url-pattern>
    <metadata>
        <name>Generated Code</name>
        <minVersion>7</minVersion>
        <method type="GET" ALSO="PUT" authenticationRequired="false">
            <summary>Get the code to run a pathquery in a given language.</summary>
            <description>
	            This service provides the ability to generate code in one of several
	            languages based on a pathquery provided in serialised form.
	        </description>
            <param type="enumerated" default="py" values="pl,py,rb,js,java" required="true" description="The language to generate code in.">lang</param>
            <param type="XML" required="true" description="The query to generate code for, in XML form." schema="/service/schema/query.xsd">query</param>
            <returns>
                <format>text</format>
	            <format key="code">json</format>
	            <format>xml</format>
	        </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-list-tags</servlet-name>
    <servlet-class>org.intermine.webservice.server.lists.ListTagServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-list-tags</servlet-name>
    <url-pattern>/service/list/tags/*</url-pattern>
    <metadata>
        <name>List Tags</name>
        <minVersion>7</minVersion>
        <method authenticationRequired="false" type="GET" >
            <summary>Get the tags for a list, or all the tags for a given user</summary>
            <description>
                Fetch an up-to-date list of all tags associated with a list, or all lists.
            </description>
            <param type="String" required="false" description="The name of a list whose tags to retrieve. If no list is provided, then all the tags associated with the authenticating user will be returned.">name</param>
            <returns>
	            <format key="tags">json</format>
	            <format>xml</format>
	            <format>tab</format>
	            <format>csv</format>
	        </returns>
        </method>
        <method authenticationRequired="true" type="POST">
            <summary>Add one or more tags to a list</summary>
            <param type="String" required="true" description="The name of a list to add the tag(s) to.">name</param>
            <param type="String" required="true" description="The name of the tags to add. It should take to from of a semi-colon delimited concatenation of the tag names.">tags</param>
            <returns>
                <format key="tags">json</format>
                <format>xml</format>
                <format>tab</format>
                <format>csv</format>
            </returns>
        </method>
        <method authenticationRequired="true" type="DELETE">
            <summary>Delete one or more tags from a list</summary>
            <param type="String" required="true" description="The name of a list to add the tag(s) to.">name</param>
            <param type="String" required="true" description="The name of the tags to remove. It should take to from of a semi-colon delimited concatenation of the tag names.">tags</param>
            <returns>
                <format key="tags">json</format>
                <format>xml</format>
                <format>tab</format>
                <format>csv</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <!-- NEW IN VERSION 8 -->

  <servlet>
  <servlet-name>ws-available-widgets</servlet-name>
    <servlet-class>org.intermine.webservice.server.widget.AvailableWidgetsServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-available-widgets</servlet-name>
    <url-pattern>/service/widgets/*</url-pattern>
    <metadata>
        <name>Widgets</name>
        <minVersion>8</minVersion>
        <method authenticationRequired="false" type="GET">
            <summary>Get a list of the widgets available at a service</summary>
            <description>
                This service returns a list of the widgets that are available at a
                given service. Each entry for the widget includes details of its type,
                the kind of data it processes, and any filters it accepts.
            </description>
            <returns>
	            <format key="widgets">json</format>
	            <format>xml</format>
	            <format>tab</format>
	            <format>csv</format>
	        </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-service-listing</servlet-name>
    <servlet-class>org.intermine.webservice.server.ServicesListingsServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet>
    <servlet-name>ws-widgets</servlet-name>
    <servlet-class>org.intermine.webservice.server.widget.WidgetsServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-widgets</servlet-name>
    <url-pattern>/service/list/enrichment/*</url-pattern>
    <metadata>
        <name>Enrichment Widgets</name>
        <minVersion>8</minVersion>
        <method authenticationRequired="true" type="GET" ALSO="POST">
            <summary>get the data for a given enrichemnt widget</summary>
            <description>
                Enrichment widgets provide a statistical summary of what makes a list distinct from
                the background population over a certain domain. They return a list of members of the
                domain ranked by p-value (low to high).
            </description>
            <param type="String" required="true" description="The name of the list to investigate">list</param>
            <param type="String" required="true" description="The name of the enrichment widget to display">widget</param>
            <param type="String" required="false" description="The name of the list to use as the background population">population</param>
            <param type="Float" default="0.05" required="true" description="The maximum p-value of results to display. The range is 0.0 - 1.0">maxp</param>
            <param type="enumerated" values="Holm-Bonferroni,Benjamini and Hochberg,Bonferroni,None" default="Holm-Bonferroni" required="true" description="The error correction algorithm to use.">correction</param>
            <param type="String" required="false" description="An optional filter that some widgets accept">filter</param>
            <returns>
	            <format key="results">json</format>
	            <format>xml</format>
	            <format>tab</format>
	            <format>csv</format>
	        </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-list-graphs</servlet-name>
    <servlet-class>org.intermine.webservice.server.widget.GraphWidgetsServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-list-graphs</servlet-name>
    <url-pattern>/service/list/chart/*</url-pattern>
    <!-- Custom extensions that allow us to automatically generate documentation -->
    <metadata>
        <name>Graphical Widgets</name>
        <minVersion>8</minVersion>
        <method type="GET" authenticationRequired="true" ALSO="POST">
            <summary>get the data to produce a graph</summary>
            <description>
	           This service returns data that can be passed to charting software, such
	           as Google's javascript Charts API, to produce graphical representations
	           of the overview of data in a list.
	        </description>
            <param type="String" required="true" description="The name of the list to use as the population for the graph">list</param>
            <param type="String" required="true" description="The name of the graphical widget to display">widget</param>
            <param type="String" required="false" description="An optional filter that some widgets accept">filter</param>
	        <returns>
	            <format key="results">json</format>
	            <format>xml</format>
	        </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-list-table</servlet-name>
    <servlet-class>org.intermine.webservice.server.widget.TableWidgetsServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-list-table</servlet-name>
    <url-pattern>/service/list/table/*</url-pattern>
    <!-- Custom extensions that allow us to automatically generate documentation -->
    <metadata>
        <name>Table Widgets</name>
        <minVersion>8</minVersion>
        <method type="GET" authenticationRequired="true" ALSO="POST">
            <summary>Get the data as displayed by a table widget</summary>
            <description>
	            This service returns data to produce a table representations
	            of the overview of data in a list.
	        </description>
            <param type="String" required="true" description="The name of the list to use as the population for the graph">list</param>
            <param type="String" required="true" description="The name of the graphical widget to display">widget</param>
            <returns>
	            <format key="results">json</format>
	            <format>xml</format>
	        </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-report-widget</servlet-name>
    <servlet-class>org.intermine.webservice.server.widget.ReportWidgetsServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-report-widget</servlet-name>
    <url-pattern>/service/widget/report/*</url-pattern>
    <metadata>
        <name>Report Widgets</name>
        <minVersion>8</minVersion>
        <methods>
            <method authenticationRequired="false" function="get the Report Widget JavaScript package">GET</method>
        </methods>
        <params>
            <param type="String" required="true" description="The name of the widget to use">id</param>
            <param type="String" required="true" description="The callback to use in the widget">callback</param>
        </params>
        <returns>
            <format key="results">json</format>
            <format>js</format>
        </returns>
        <description>
            This service returns a Report Widget in a JavaScript package.
        </description>
    </metadata>
  </servlet-mapping>

   <!-- NEW IN VERSION 9 -->

  <servlet>
    <servlet-name>ws-quick-search</servlet-name>
    <servlet-class>org.intermine.webservice.server.search.QuickSearchServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-quick-search</servlet-name>
    <url-pattern>/service/search</url-pattern>
    <!-- Custom extensions that allow us to automatically generate documentation -->
    <metadata>
        <name>QuickSearch</name>
        <minVersion>9</minVersion>
        <method authenticationRequired="false" type="GET" ALSO="POST">
            <summary>Perform a key-word search and retrieve the results</summary>
            <description>
                Run a general key-word style search over all data in the data-warehouse.
                Rather than a structured query for a specific type of data, this allows
                the user to search broadly over a range of data types, and use
                facetting information to restrict the search results.
            </description>
            <param type="String" required="false" description="The query string to search with. If absent, or blank, all results will be returned">q</param>
            <param type="int" required="false" description="The maximum number of records to return. If no limit is provided, all results will be returned." default="10">size</param>
            <param type="int" required="false" description="The index of the first result to return." default="0">start</param>
            <param type="String" required="false" description="A list to search within.">list</param>
            <returns>
              <format key="results">json</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

    <servlet>
    <servlet-name>ws-whoami</servlet-name>
    <servlet-class>org.intermine.webservice.server.user.WhoAmIServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-whoami</servlet-name>
    <url-pattern>/service/user/whoami</url-pattern>
    <!-- Custom extensions that allow us to automatically generate documentation -->
    <metadata>
        <name>Who-Am-I?</name>
        <minVersion>9</minVersion>
        <method authenticationRequired="true" type="GET">
            <summary>Get details about the authenticated user</summary>
	        <description>
	            Retrieve information about the currently authenticated user. This can
	            be used to display the user's name.
	        </description>
	        <returns>
                <format key="user">json</format>
            </returns>
        </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-24hr-token</servlet-name>
    <servlet-class>org.intermine.webservice.server.user.TokenServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-24hr-token</servlet-name>
    <url-pattern>/service/user/token</url-pattern>
    <!-- Custom extensions that allow us to automatically generate documentation -->
    <metadata>
        <name>Token</name>
        <minVersion>9</minVersion>
        <method type="GET" authenticationRequired="true">
            <summary>Get a new API key</summary>
	        <description>
	            This service allows a user to retrieve an API token which is valid
	            for up to 24 hours of unlimited use. The primary use case is to
	            get an API key where the user has only username/password credentials,
	            since the use of API keys is more secure.
	        </description>
	        <returns>
	            <format key="token">json</format>
	        </returns>
        </method>
    </metadata>
  </servlet-mapping>


  <servlet>
    <servlet-name>ws-new-user</servlet-name>
    <servlet-class>org.intermine.webservice.server.user.NewUserServlet</servlet-class>
    <init-param>
       <param-name>debug</param-name>
       <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-new-user</servlet-name>
    <url-pattern>/service/users</url-pattern>
    <!-- Custom extensions that allow us to automatically generate documentation -->
    <metadata>
      <name>Users</name>
      <minVersion>9</minVersion>
      <method type="POST" requiresAuthentication="false">
          <name>User Creation</name>
          <summary>Create a new user in the user-profile</summary>
          <description>
		      This service allows users of the web service to create a new user account.
		      A user account is required for a number of operations, such as saving
		      lists. This service allows users of the webservice to register an account, and
		      start using these features that require authentication. The username and
		      password provided will be able to be used for future requests, as will
		      an API key provided with the response, which is valid for 24 hours.
              This is equivalent to the registration mechanism in the web-application interface.
              Requests to this service are rate limited by IP Address
          </description>
          <param type="String" required="true" description="The user name of the new user. It should be an email address if possible. There must not be any user with the same username">name</param>
          <param type="String" required="true" description="A password to associate with the account.">password</param>
          <param type="boolean" required="false" description="Whether or not to subscribe to the mine's mailing list, if it has one. The username must be an email address if true">subscribe-to-list</param>
          <returns>
            <format key="user">json</format>
          </returns>
      </method>
    </metadata>
  </servlet-mapping>

  <servlet>
    <servlet-name>ws-classkeys</servlet-name>
    <servlet-class>org.intermine.webservice.server.ClassKeyServlet</servlet-class>
  </servlet>

  <servlet-mapping>
    <servlet-name>ws-classkeys</servlet-name>
    <url-pattern>/service/classkeys/*</url-pattern>
    <metadata>
        <name>Key Fields</name>
        <minVersion>9</minVersion>
        <method type="GET" requiresAuthentication="false">
            <summary>Get the fields used to identify an object</summary>
            <description>
                Get the fields configured for this service to identify objects uniquely within
                the database.
            </description>
            <returns>
                <format key="classes">json</format>
            </returns>
       </method>
    </metadata>
  </servlet-mapping>

   <servlet>
     <servlet-name>ws-displayers</servlet-name>
     <servlet-class>org.intermine.webservice.server.displayer.DisplayerServlet</servlet-class>
   </servlet>

   <servlet-mapping>
     <servlet-name>ws-displayers</servlet-name>
     <url-pattern>/service/displayer</url-pattern>
      <metadata>
        <name>Displayers</name>
        <minVersion>9</minVersion>
      </metadata>
   </servlet-mapping>
   
      <!-- NEW IN VERSION 10 -->
      
   <servlet>
     <servlet-name>ws-id-resolver</servlet-name>
     <servlet-class>org.intermine.webservice.server.idresolution.IdResolutionServlet</servlet-class>
   </servlet>

   <servlet-mapping>
     <servlet-name>ws-id-resolver</servlet-name>
     <url-pattern>/service/ids/*</url-pattern>
      <metadata>
        <name>ID Resolution</name>
        <minVersion>10</minVersion>
      </metadata>
   </servlet-mapping>

  <!-- MUST BE LISTED LAST OF ALL WEBSERVICES AS IT IS THE MOST GENERAL -->
  <servlet-mapping>
    <servlet-name>ws-service-listing</servlet-name>
    <url-pattern>/service</url-pattern>
  </servlet-mapping>
<!-- ================================================================================= -->

  <session-config>
    <session-timeout>1440</session-timeout>      <!-- 1440 = 24 * 60 = 1 day -->
  </session-config>

  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <taglib>
    <taglib-uri>http://jakarta.apache.org/taglibs/string-1.1</taglib-uri>
    <taglib-location>/WEB-INF/string.tld</taglib-location>
  </taglib>

  <!-- Interpret POST parameters as UTF-8 by default -->
  <filter>
      <filter-name>UseUTF8</filter-name>
      <filter-class>org.intermine.web.filters.SetCharacterEncodingFilter</filter-class>
      <init-param>
          <param-name>encoding</param-name>
          <param-value>UTF-8</param-value>
      </init-param>
      <init-param>
          <param-name>ignore</param-name>
          <param-value>false</param-value>
      </init-param>
  </filter>

  <filter-mapping>
      <filter-name>UseUTF8</filter-name>
      <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter>
  <filter-name>AllowCORSWebServiceRequests</filter-name>
  <filter-class>org.intermine.web.filters.HeaderFilter</filter-class>
      <init-param>
        <param-name>Access-Control-Allow-Origin</param-name>
        <param-value>*</param-value>
      </init-param>
      <init-param>
        <param-name>Access-Control-Allow-Headers</param-name>
        <param-value>Origin, X-Requested-With, Content-Type, Accept, Authorization</param-value>
    </init-param>
    <init-param>
        <param-name>Access-Control-Allow-Methods</param-name>
        <param-value>DELETE, POST, GET, OPTIONS, PUT</param-value>
    </init-param>
  </filter>

  <filter-mapping>
    <filter-name>AllowCORSWebServiceRequests</filter-name>
    <url-pattern>/service/*</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>DontCache</filter-name>
    <filter-class>org.intermine.web.filters.HeaderFilter</filter-class>
    <init-param>
      <param-name>Cache-Control</param-name>
    <param-value>no-cache,no-store,max-age=0</param-value>
    </init-param>
    <init-param>
      <param-name>Expires</param-name>
      <param-value>0</param-value>
    </init-param>

  </filter>

  <filter-mapping>
    <filter-name>DontCache</filter-name>
    <url-pattern>/query.do</url-pattern>
  </filter-mapping>

  <filter>
    <filter-name>ExpireHeader</filter-name>
    <filter-class>org.intermine.web.filters.ExpiresHeaderFilter</filter-class>
  </filter>

  <filter-mapping>
    <filter-name>ExpireHeader</filter-name>
    <url-pattern>*.js</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>ExpireHeader</filter-name>
    <url-pattern>*.css</url-pattern>
  </filter-mapping>
  
  <filter>
  	<filter-name>ReleaseEtags</filter-name>
  	<filter-class>org.intermine.web.filters.ReleaseEtagFilter</filter-class>
  </filter>
  
  <filter-mapping>
  	<filter-name>ReleaseEtags</filter-name>
  	<servlet-name>ws-model</servlet-name>
  	<dispatcher>REQUEST</dispatcher>
  	<dispatcher>FORWARD</dispatcher>
  </filter-mapping>
  
 <filter>
  <filter-name>CompressingFilter</filter-name>
  <filter-class>com.planetj.servlet.filter.compression.CompressingFilter</filter-class>
 </filter>

 <filter-mapping>
  <filter-name>CompressingFilter</filter-name>
  <url-pattern>/*</url-pattern>
 </filter-mapping>

  <error-page>
    <error-code>500</error-code>
    <location>/static/flymine-offline/</location>
  </error-page>
  <error-page>
    <error-code>502</error-code>
    <location>/static/flymine-offline/</location>
  </error-page>
  <error-page>
    <error-code>503</error-code>
    <location>/static/flymine-offline/</location>
  </error-page>
  <error-page>
    <error-code>404</error-code>
    <location>/pagenotfound.do</location>
  </error-page>

  <jsp-config>
    <jsp-property-group>
      <url-pattern>*.jsp</url-pattern>
      <trim-directive-whitespaces>true</trim-directive-whitespaces>
    </jsp-property-group>
  </jsp-config>

</web-app>
