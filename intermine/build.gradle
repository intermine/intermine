subprojects {
    group = 'org.intermine'
    version '5.0.1'

    apply plugin: "java"
    apply plugin: "maven"
    apply plugin: "signing"
    apply plugin: "checkstyle"
    apply plugin: "idea"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        flatDir {
            dirs '../libs'
        }
    }

    configurations {
        all {
            resolutionStrategy {
                force 'org.apache.logging.log4j:log4j-1.2-api:2.8.2'
            }
        }
    }

    if (it.name != 'intermine-resources') {
        dependencies {
            compile group: 'ant', name: 'ant', version: '1.6.5'
            compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.8.2'
            compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.7'
            testCompile group: 'junit', name: 'junit', version: '4.8.2'
        }

        if (it.name != 'intermine-testresources') {
            dependencies {
                compile project(':intermine-resources')
            }
        }
    }

    // see http://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    checkstyle {
        toolVersion '7.8.1'
        configFile file("${rootDir}/../config/checkstyle/checkstyle.xml")
        sourceSets = [sourceSets.main]
        showViolations = true
        ignoreFailures = false
        maxWarnings = 0
        //reportsDir = file("$project.rootDir/reports/checkstyle/$project.name")
        configProperties = [
                'checkstyle.header.file': "${rootDir}/../config/checkstyle/copyright_header.txt",
                'suppressionFile'       : "${rootDir}/../config/checkstyle/suppressions.xml"
        ]
    }

    def excludePattern = 'build/generated-src/antlr/main/'
    def excludePatternAntStyle = '**/' + excludePattern + '*'

    checkstyleMain {
        exclude excludePatternAntStyle
        source = fileTree('src/main') {
            includes = ['**/*.java']
            excludes = ['**/org/intermine/model/fulldata/**', '**/org/intermine/api/userprofile/**', 'build/**']
        }
    }

    checkstyleTest {
        enabled = false
    }

    tasks.withType(Test) {
        scanForTestClasses = false
        include '**/*Test.class'
        test.reports.html.enabled = true
    }

    test {
        ignoreFailures = true

        // we have a system property that we need to get to the tests
        systemProperties System.properties

        testLogging {
            events "skipped", "failed"
            exceptionFormat "full"
            showExceptions true
            showStackTraces true
            showCauses true
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { gradle.taskGraph.hasTask("publish") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name project.name
                    packaging 'jar'
                    description 'InterMine core modules'
                    url 'https://github.com/intermine/intermine'

                    scm {
                        connection 'scm:git:git://github.com/intermine/intermine.git'
                        developerConnection 'scm:git:ssh://github.com:intermine/intermine.git'
                        url 'https://github.com/intermine/intermine'
                    }

                    licenses {
                        license {
                            name 'LGPL-2.1'
                            url 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                        }
                    }

                    developers {
                        developer {
                            name 'InterMine core team and contributors'
                        }
                    }
                }
            }
        }
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}

